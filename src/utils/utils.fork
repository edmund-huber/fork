#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014, 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


import ast
import err
import lex
import list
import mem
import txt
import utils


func charIsIdVal(ch uint8) bool
  if (ch >= 48) and (ch <= 57) #is a number
    return true
  /if

  if (ch >= 65) and (ch <= 90) #is an uppercase letter
    return true
  /if

  if (ch >= 97) and (ch <= 122) #is a lowcase letter
    return true
  /if

  if ch == 95 #is a `_`
    return true
  /if

  return false
/func


func charIsControl(ch uint8) bool
  return ch < 20 or ch > 126
/func


func charIsPar(ch uint8) bool
  #40 == `(`, 41 == `)`, 91 == `[`, 93 == `]`
  return ch == 40 or ch == 41 or ch == 91 or ch == 93
/func


func charIsWhite(ch uint8) bool
  #32 == ` `, 10 == `\n`, 13 == `\r`, 12 == `\f`, 11 == `\v`, 9 == `\t`
  return ch == 32 or ch == 10 or ch == 13 or ch == 12 or ch == 11 or ch == 9
/func


func charIsSym(ch uint8) bool
  return !charIsIdVal(ch) and !charIsPar(ch) and !charIsWhite(ch)
/func


func charCanBeInString(ch uint8, escape bool) bool
  if !escape and ch == 34 # `"`
    return false #if the matching " is found, then stop
  /if

  return !charIsControl(ch)
/func


func strIsUInt(str ptr uint8) bool
  while val str != 0
    if (val str < 48) or (val str > 57) # current letter is not an ASCII number
      return false
    /if

    str++
  /while

  return true
/func


func listContains(list ptr list:List, value ptr uint8) bool
  mut i uintptr = 0
  mut len = list:listLen(list)


  mut clone = val list

  # this fixes a weird bug in list:List that I haven't found yet.
  list:listSeekZero(list)

  while i < len
    mut ptrElem = list:listGet(list, i)
    mut elem = cast<ptr uint8>(val ptrElem)

    if txt:strequals(elem, value)
      return true
    /if

    i++
  /while

  return false
/func


func listDumpHierarchyIntoCS(list ptr list:List, cs ptr txt:Charstash)
  mut len = list:listLen(list)

  txt:csAppendStr(cs, "(")

  if len > 1

    mut i = cast<intptr>(len)

    while i > 0
      i--

      txt:csAppendStr(cs, cast<ptr uint8>(val list:listGet(list, i)))

      txt:csAppendStr(cs, " => ")
    /while

    txt:csAppendStr(cs, cast<ptr uint8>(val list:listGet(list, len - 1)))
  else
    txt:csAppendStr(cs, "alias of itself")
  /if

  txt:csAppendStr(cs, ")")
/func


mut ISSUE_ERR  uint8 = 10
mut ISSUE_WARN uint8 = 20
mut ISSUE_INFO uint8 = 30
