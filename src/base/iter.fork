#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014, 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


import base
import mem


func mapiterStart(map ptr base:Map) ptr base:MapIter
  mut iter = cast<ptr base:MapIter>(mem:alloc(size(base:MapIter)))
  iter'map = map
  iter'lastKey = null
  iter'begin = true
  return iter
/func


func iterIntNext(node ptr base:Mnode, lastKey data) ptr base:Pair

  if node == null
    return null
  /if

  mut cmp = node'cmp(lastKey, node'key)

  #lastKey < node'key
  if cmp < 0
    mut pair = iterIntNext(node'left, lastKey)
    if pair != null
      return pair
    /if

    decl nodeMkpair func(node ptr base:Mnode) ptr base:Pair
    return nodeMkpair(node)
  /if

  return iterIntNext(node'right, lastKey)

/func


func mapiterNext(iter ptr base:MapIter) ptr base:Pair
  mut root = iter'map'root

  if root == null
    return null
  /if

  if iter'begin
    iter'begin = false
    decl nodeMinpair func(node ptr base:Mnode) ptr base:Pair
    mut pair = nodeMinpair(root)
    iter'lastKey = pair'key
    return pair
  /if

  mut pair = iterIntNext(root, iter'lastKey)

  if pair != null
    iter'lastKey = pair'key
  /if

  return pair

/func


func mapiterFree(iter ptr base:MapIter)
  mem:free(iter)
/func
