#  This file is part of First Step.
#
#  First Step is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software
#  Foundation, either version 3 of the License, or (at your option) any later version.
#
#  First Step is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with First Step.  If not, see <http://www.gnu.org/licenses/>
#
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014

import base

func mapiterStart(map ptr base:Map) ptr base:MapIter
  mut iter = cast<ptr base:MapIter>(base:alloc(size(base:MapIter)))
  iter'map = map
  iter'lastKey = null
  iter'begin = true
  return iter
/func

func iterIntNext(node ptr base:Mnode, lastKey data) ptr base:Pair

  if node == null
    return null
  /if

  mut cmp = node'cmp(lastKey, node'key)

  #lastKey < node'key
  if cmp < 0
    mut pair = iterIntNext(node'left, lastKey)
    if pair != null
      return pair
    /if

    decl nodeMkpair func(node ptr base:Mnode) ptr base:Pair
    return nodeMkpair(node)
  /if

  return iterIntNext(node'right, lastKey)

/func

func mapiterNext(iter ptr base:MapIter) ptr base:Pair
  mut root = iter'map'root

  if root == null
    return null
  /if

  if iter'begin
    iter'begin = false
    decl nodeMinpair func(node ptr base:Mnode) ptr base:Pair
    mut pair = nodeMinpair(root)
    iter'lastKey = pair'key
    return pair
  /if

  mut pair = iterIntNext(root, iter'lastKey)

  if pair != null
    iter'lastKey = pair'key
  /if

  return pair

/func

func mapiterFree(iter ptr base:MapIter)
  base:free(iter)
/func
