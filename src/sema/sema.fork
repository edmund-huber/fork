#  Second Step - Experimental Fork Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.

import ast
import ctx
import sema
import spring
import synt
import utils


# root node contains global declarations
# it has no stack, and no declaration order
func makePRootStab(ctx ptr ctx:Context, root ptr ast:PNode, errors ptr spring:List) ptr ast:Symtable
  mut children = root'leaves
  mut stab = ast:stabNew()

  mut i uintptr = 0
  mut len = spring:listLen(children)

  while i < len
    mut child = cast<ptr ast:PNode>(val spring:listGet(children, i))

    if ast:isPDecl(child)
      mut pdecl = cast<ptr ast:PDecl>(child)
      mut sym = pdecl'sym

      mut existing = ast:stabTypeof(stab, sym'name)
      if existing != null
        mut errMsg = spring:strappend(sym'name, " is already defined")

        spring:listAppend(errors, utils:issueNew(utils:ISSUE_ERR, pdecl'node'begin, ctx'currentFile, errMsg))

        spring:free(errMsg)
      /if
    /if

    i++
  /while

  ## FINISH THIS ##

  return stab
/func


func validatePRootAliases(ctx ptr ctx:Context, root ptr ast:PNode, errors ptr spring:List) ptr ast:Symtable
  mut children = root'leaves
  mut len = spring:listLen(children)
  mut i uintptr = 0

  mut aliases = ast:stabNew()

  while i < len
    mut child = cast<ptr ast:PNode>(val spring:listGet(children, i))

    i++
  /while
/func


func semaValidateAst(ctx ptr ctx:Context, root ptr ast:PNode) ptr spring:List
  if root'type != ast:PROOT
    return null
  /if

  mut proot = cast<ptr ast:PRoot>(root)

  ctx:contextSetCurrentFile(ctx, proot'fileName)

  mut errors = ctx:contextImportAll(ctx, proot'imports)

  ctx:contextSetCurrentFile(ctx, proot'fileName)

  if spring:listLen(errors) != 0
    return errors
  /if

  proot'typePool = utils:fpNew(cast<ptr func(item data)>(ptr ast:typeFree))

  proot'aliases = ast:stabNew()

  sema:semaValidateAstRoot(ctx, proot, errors)

  return errors
/func


func semaParse(ctx ptr ctx:Context, fileName ptr uint8, newRoot ptr ptr ast:PNode) ptr spring:List
  mut parser = synt:parserNew(fileName)

  val newRoot = synt:parserParse(parser)

  mut error = parser'err

  synt:parserFree(parser)

  if val newRoot == null
    mut list = spring:listNew()
    spring:listAppend(list, error)

    return list
  /if

  return sema:semaValidateAst(ctx, val newRoot)
/func
