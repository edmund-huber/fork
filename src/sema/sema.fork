#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


import ast
import ctx
import list
import sema
import synt
import utils


func semaValidateAst(ctx ptr ctx:Context, root ptr ast:PNode) ptr list:List
  if root'type != ast:PROOT
    return null
  /if

  mut proot = cast<ptr ast:PRoot>(root)

  ctx:contextSetCurrentFile(ctx, proot'fileName)

  mut errors = ctx:contextImportAll(ctx, proot'imports)

  ctx:contextSetCurrentFile(ctx, proot'fileName)

  if list:listLen(errors) != 0
    return errors
  /if

  proot'typePool = utils:fpNew(cast<ptr func(item data)>(ptr ast:typeFree))

  proot'aliases = ast:stabNew()

  sema:semaValidateAstRoot(ctx, proot, errors)

  return errors
/func


func semaParse(ctx ptr ctx:Context, fileName ptr uint8, newRoot ptr ptr ast:PNode) ptr list:List
  mut parser = synt:parserNew(fileName)

  val newRoot = synt:parserParse(parser)

  mut error = parser'err

  synt:parserFree(parser)

  if val newRoot == null
    mut list = list:listNew()
    list:listAppend(list, error)

    return list
  /if

  return sema:semaValidateAst(ctx, val newRoot)
/func
