#  Second Step - Experimental Fork Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


import ast
import ctx
import sema
import spring
import utils


func resolverDeinit(rsv sema:Resolver)
  utils:kvFree(rsv'aliases)
  utils:kvFree(rsv'decls)
/func


func resolverCollect(rsv ptr sema:Resolver, ctx ptr ctx:Context, root ptr ast:PRoot, errors ptr spring:List) bool
  rsv'aliases = utils:strkvNew()
  rsv'decls = utils:strkvNew()
  rsv'root = root
  rsv'ctx = ctx

  mut len = spring:listLen(root'node'node'leaves)
  mut i uintptr = 0
  mut entryNode ptr ast:PDecl = null

  while i < len
    mut pdecl = cast<ptr ast:PDecl>(val spring:listGet(root'node'node'leaves, i))
    mut ntype = pdecl'node'type
    mut name = pdecl'sym'name
    mut kv ptr utils:KVList = null

    if ntype == ast:PDECL or ntype == ast:PMUT or ntype == ast:PFUNCTION
      mut existent ptr ast:PDecl

      if utils:kvGet(rsv'decls, name, ptr existent)
        if pdecl'node'type != ast:PDECL and existent'node'type != ast:PDECL
          resolverDeinit(val rsv)

          mut cs = spring:csNew(20)
          spring:csAppendStr(cs, "symbol ")
          spring:csAppendStr(cs, name)
          spring:csAppendStr(cs, " defined twice")

          mut str = spring:csUnleash(cs)
          spring:listAppend(errors, utils:issueNew(utils:ISSUE_ERR, pdecl'node'begin, root'fileName, str))

          spring:free(str)
          
          return false

        else

          # ignore the decl, reset the value
          if pdecl'node'type == ast:PDECL
            pdecl = existent
          /if
        /if
      /if

      kv = rsv'decls

    else

      if ntype == ast:PALIAS
        if utils:kvContains(rsv'aliases, name)
          resolverDeinit(val rsv)

          mut cs = spring:csNew(20)
          spring:csAppendStr(cs, "alias ")
          spring:csAppendStr(cs, name)
          spring:csAppendStr(cs, " is already defined")

          spring:listAppend(errors, utils:issueNew(utils:ISSUE_ERR, pdecl'node'begin, root'fileName, spring:csUnleash(cs)))

          return false
        /if

        kv = rsv'aliases
      else

        if ntype == ast:PENTRY
          if entryNode == null
            entryNode = pdecl
          else
            spring:listAppend(errors, utils:issueNew(utils:ISSUE_ERR, pdecl'node'begin, root'fileName, "entry declared twice in same file"))
            resolverDeinit(val rsv)

            return false
          /if
        else
          spring:errln("Unreachable: invalid pdecl value")
          spring:abort()
        /if
      /if
    /if


    utils:kvPut(kv, name, pdecl)

    i++
  /while

  return true
/func
