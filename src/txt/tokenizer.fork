#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015, 2016
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module txt


import mem
import txt


func tokenizerFree(tkz ptr txt:Tokenizer)
  if tkz?
    mem:free(tkz'str)
    mem:free(tkz)
  /if
/func


func tokenizerNew(str ptr uint8, ch uint8) ptr txt:Tokenizer
  mut tkz = <ptr txt:Tokenizer>(mem:zalloc(size(txt:Tokenizer)))
  tkz'str = txt:strclone(str)
  tkz'strlen = txt:strlen(str)
  tkz'splitChar = ch

  return tkz
/func


method txt:Tokenizer.next() ptr uint8
  if me'begin == me'strlen
    return null
  /if

  mut initialBegin = me'begin

  while me'str[me'begin] != me'splitChar and me'begin < me'strlen
    me'begin++
  /while

  mut nextLen = me'begin - initialBegin
  mut ret = <ptr uint8>(mem:zalloc(nextLen + 1)) # + 1 is for the null end.

  txt:strncpy(ret, me'str + initialBegin, nextLen)

  if me'str[me'begin] == me'splitChar
    me'begin++
  /if

  return ret
/method
