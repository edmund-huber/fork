#  Second Step - Experimental Fork Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.

import ast
import spring
import utils


func symbolFree(sym ptr ast:Symbol)
  if sym != null
    spring:free(sym'name)
    utils:decRef(sym'type)
    spring:free(sym)
  /if
/func


func symbolNew(name ptr uint8, type ptr ast:Type) ptr ast:Symbol
  mut sym = cast<ptr ast:Symbol>(spring:zalloc(size(ast:Symbol)))

  sym'refc'freeFunc = ptr symbolFree

  utils:incRef(type)
  sym'name = name
  sym'type = type

  return sym
/func


func typeFree(type ptr ast:Type)
  if type != null
    if type'descr != null
      utils:decRef(type'descr)
    /if

    if type'moduleName != null
      spring:free(type'moduleName)
    /if

    if type'name != null
      spring:free(type'name)
    /if

    spring:free(type)
  /if
/func


func typeNew(name, moduleName ptr uint8, descr ptr ast:TypeDescr) ptr ast:Type
  mut type = cast<ptr ast:Type>(spring:zalloc(size(ast:Type)))

  type'refc'freeFunc = ptr typeFree

  type'name = name
  type'moduleName = moduleName
  utils:incRef(descr)
  type'descr = descr

  return type
/func


func typeDescrFree(descr ptr ast:TypeDescr)
  if descr != null
    if descr'retType != null
      utils:decRef(descr'retType)
    /if

    if descr'arguments != null
      spring:listFreeAll(descr'arguments, ptr symbolFree)
    /if
  /if
/func


func typeDescrNew(type uint16, retType ptr ast:Type, params ptr spring:List) ptr ast:TypeDescr
  mut descr = cast<ptr ast:TypeDescr>(spring:zalloc(size(ast:TypeDescr)))

  descr'refc'freeFunc = ptr typeDescrFree

  utils:incRef(retType)

  descr'type = type
  descr'retType = retType
  descr'arguments = params

  return descr
/func


func typeDescrNewLoc(innerType ptr ast:Type, length uintptr) ptr ast:TypeDescr
  mut typeDescr = typeDescrNew(ast:TYPE_LOC, innerType, null)
  typeDescr'length = length

  return typeDescr
/func


mut aliasFree = cast<ptr func(item ptr ast:Alias)>(symbolFree)
mut aliasNew  = cast<ptr func(name ptr uint8, type ptr ast:Type) ptr ast:Alias>(symbolNew)

mut TYPE_FUNC   uint16 = 10
mut TYPE_ID     uint16 = 20
mut TYPE_PTR    uint16 = 30
mut TYPE_STRUCT uint16 = 40
mut TYPE_LOC    uint16 = 50
