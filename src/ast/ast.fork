#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015, 2016
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module ast


import hash
import list
import mem
import memutils
import txt
import vect


alias PNode struct(
  type uint16,
  value uintptr,
  parent ptr PNode,
  leaves ptr list:List,
  begin, end txt:Line,
  validated bool
)


alias PBlock struct(
  node PNode,
  syms ptr Symtable
)


alias StringDef struct(
  name ptr uint8,
  begin,end txt:Line
)


alias PDecl struct(
  node PNode,
  sym ptr PSymbol,
  isDecl bool,
  methodTypeModule,methodType ptr uint8
)


alias PMulDecl struct(
  node PNode,
  syms ptr list:List
)


alias PRoot struct(
  node PBlock,
  moduleName ptr StringDef,
  fileName ptr uint8,
  imports ptr list:List,
  aliases ptr Symtable,
  typePool ptr memutils:FreePool,
  entryNode ptr PDecl,
  pmodule ptr PModule
)


alias PExpr struct(
  node PNode,
  opType uint16,
  constant bool,
  type,sizeType ptr Type
)


alias PModule struct(
  name ptr uint8,
  roots ptr vect:Vect,
  entryNode ptr PNode
)


func methodKey(typeModule,typeName,methodName ptr uint8) ptr uint8
  mut cs = txt:newCs(10)

  if typeModule?
    cs.add(typeModule)
    cs.add(":")
  /if

  cs.add(typeName)

  cs.add(".")

  cs.add(methodName)

  return txt:unwrapCs(cs)
/func


func declKey(pdecl ptr PDecl) ptr uint8
  mut isMet =  pdecl'node'type == PMETHOD

  if not isMet
    return txt:strclone(pdecl'sym'name)
  /if

  return methodKey(pdecl'methodTypeModule, pdecl'methodType, pdecl'sym'name)
/func


method PNode.findPBlock() ptr PNode
  if me.isBlock()
    return me
  /if

  if me'parent?
    return me'parent.findPBlock()
  /if

  return null
/method


method PNode.findPRoot() ptr PRoot
  if me.isRoot()
    return <ptr PRoot>(me)
  /if

  if me'parent?
    return me'parent.findPRoot()
  /if

  return null
/method


method PNode.findStab() ptr Symtable
  mut pblock = me.findPBlock()

  return pblock? => <ptr PBlock>(pblock)'syms || null
/method


method PNode.findSymInFile(name ptr uint8) {type ptr Type,
                                                root ptr PRoot}
  mut pblock = me.findPBlock()

  if pblock?
    mut stab = pblock.findStab()

    if not stab?
      return {null, pblock.findPRoot()}
    /if

    mut type = stab.typeof(name)

    if type?
      return {type, null}
    /if

    if pblock'parent?
      return {pblock'parent.findSym(name), null}
    /if

    return {null, <ptr PRoot>(pblock)}
  /if

  return {null, null}
/method


method PNode.findSym(name ptr uint8) ptr Type
  mut {locSym, curRoot} = me.findSymInFile(name)

  if locSym?
    return locSym
  /if

  # try to search into the rest of the module for a global declaration.
  if curRoot? and curRoot'node'node.isRoot()
    if curRoot'pmodule?
      return curRoot'pmodule.findSym(name)
    /if
  /if

  return null
/method


method PNode.findSymLocal(name ptr uint8) ptr Type
  mut stab = me.findStab()

  return stab.typeof(name)
/method


method PNode.isBlock() bool
  return me'type == PBLOCK or me.isRoot()
/method


method PNode.isBreakContinue() bool
  return me'type == PBREAK or me'type == PCONTINUE
/method


method PNode.isDecl() bool
  return me'type == PALIAS or me'type == PMUT or me'type == PENTRY or me'type == PFUNCTION or me'type == PMETHOD
/method


method PNode.isExpr() bool
  return me'type == PEXPR
/method


method PNode.isIf() bool
  return me'type == PIF or me'type == PIFELSE
/method


method PNode.isMulDecl() bool
  return me'type == PMUTEXP
/method


method PNode.isMutOrDecl() bool
  return me'type == PMUT or (me.isDecl() and <ptr PDecl>(me)'isDecl)
/method


method PNode.isReturn() bool
  return me'type == PRETURN
/method


method PNode.isRoot() bool
  return me'type == PROOT
/method


method PNode.isWhile() bool
  return me'type == PWHILE
/method


method PRoot.hasImported(name ptr uint8) bool
  mut i uintptr = 0
  mut len = me'imports.len()

  while i < len
    mut elem = <ptr StringDef>(val me'imports.get(i))

    if txt:strequals(elem'name, name)
      return true
    /if

    i++
  /while

  return false
/method


method PModule.findDecl(name ptr uint8) ptr DeclInfo
  mut i uintptr = 0
  mut len = me'roots.len()

  while i < len
    mut root = <ptr PRoot>(val me'roots.get(i))

    if root'node'syms?
      mut declInfo = root'node'syms.get(name)
      if declInfo?
        return declInfo
      /if
    /if

    i++
  /while

  return null
/method


method PModule.findSym(name ptr uint8) ptr Type
  mut i uintptr = 0
  mut len = me'roots.len()

  while i < len
    mut root = <ptr PRoot>(val me'roots.get(i))

    if root'node'syms?
      mut modSym = root'node'syms.typeof(name)
      if modSym?
        return modSym
      /if
    /if

    i++
  /while

  return null
/method


func pmoduleFree(pmod ptr PModule)
  if pmod?
    mem:free(pmod'name)
    vect:freeAll(pmod'roots, <ptr func(r data)>(ptr pnodeFree))

    mem:free(pmod)
  /if
/func


func pnodeFree(pnode ptr PNode)
  if pnode?
    if pnode.isRoot()

      mut proot = <ptr PRoot>(pnode)
      strdefFree(proot'moduleName)
      mem:free(proot'fileName)
      list:freeAll(proot'imports, <ptr func(inst data)>(ptr strdefFree))
      stabFree(proot'aliases)

      memutils:fpFree(proot'typePool)
    /if

    if pnode.isDecl()

      mut pdecl = <ptr PDecl>(pnode)
      memutils:decRef(pdecl'sym)

      mem:free(pdecl'methodTypeModule)
      mem:free(pdecl'methodType)

    /if

    if pnode.isBlock()
      stabFree(<ptr PBlock>(pnode)'syms)
    /if

    # remember to fix PBLOCK leaks.

    # remember to fix PEXPR leaks.

    list:freeAll(pnode'leaves, ptr pnodeFree)

    mem:free(pnode)
  /if
/func


mut PROOT      uint16 = 10
mut PENTRY     uint16 = 20
mut PFUNCTION  uint16 = 30
mut PALIAS     uint16 = 40
mut PMUT       uint16 = 60
mut PMUTEXP    uint16 = 65
mut PIF        uint16 = 70
mut PEXPR      uint16 = 80
mut PBREAK     uint16 = 90
mut PCONTINUE  uint16 = 100
mut PRETURN    uint16 = 110
mut PIFELSE    uint16 = 120
mut PWHILE     uint16 = 130
mut PBLOCK     uint16 = 140
mut PMETHOD    uint16 = 150
