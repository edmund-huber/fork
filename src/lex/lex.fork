#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014, 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


import base
import err
import lex
import mem
import text
import utils


alias Char struct(ch uint8, pos uintptr)


func strtokNew(str ptr uint8, line,begin,end uintptr) ptr lex:StringTok
  mut strTok = cast<ptr lex:StringTok>(mem:zalloc(size(lex:StringTok)))

  strTok'str = str

  strTok'begin = begin
  strTok'end = end
  strTok'line = line

  return strTok
/func


func strtokFree(stok ptr lex:StringTok)
  if stok != null
    mem:free(stok)
  /if
/func


func nextChar(lex ptr lex:Lexer) Char
  mut ret Char
  ret'ch = lex'peek
  ret'pos = 0

  base:streamRead(lex'file, ptr lex'peek, 1)
  if (lex'error = base:streamError(lex'file)) != null
    ret'ch = 0
    return ret
  /if

  lex'lineno'pos++

  ret'pos = lex'lineno'pos

  if base:streamEnded(lex'file)
    lex'peek = 0
  /if

  if ret'ch == 12 #carriage return
    if lex'peek != 10 #new line (Windows format case)
      lex'error = lex:errorLex(lex, "inconsistent end of line - no newline after carriage return")
      ret'ch = 0
      return ret
    /if
    return nextChar(lex)
  /if

  if lex'firstLineLetter
    lex'firstLineLetter = false
    lex'lineno'lineno++
    lex'lineno'pos = 1
  /if

  if ret'ch == 10 # newline
    lex'firstLineLetter = true
  /if

  return ret
/func


func lexDiscardComment(lex ptr lex:Lexer)
  mut ch Char
  ch'ch = 0
  while !lex:lexerEof(lex) and ch'ch != 10
    if (ch = nextChar(lex))'ch == 0 #discard
      return #exit on error
    /if
  /while

/func


mut STX = 2 # There is no reason for using 2 and not another reserved character.


func applyEscape(ch uint8, escape bool) uint8

  if !escape
    return ch
  /if

  if ch == 97 # `a`
    return 7 # BEL
  /if

  if ch == 98 # `b`
    return 8 # BS
  /if

  if ch == 110 # `n`
    return 10 # NL
  /if

  if ch == 114 # `r`
    return 13
  /if

  if ch == 116 # `t`
    return 9
  /if

  return ch
/func


func lexExtractString(lex ptr lex:Lexer) ptr lex:StringTok
  mut ch = nextChar(lex) #discard the `"`
  mut begin = ch'pos

  mut cs = text:csNew(10) #just a magic number here
  #an STX is added at the beginning, indicating that the content is not a token but a whole string.
  text:csAppend(cs, STX)

  mut escape = false

  while !lex:lexerEof(lex) and utils:charCanBeInString(lex'peek, escape)
    ch = nextChar(lex)
    if ch'ch == 0
      text:csFree(cs)
      return null
    /if

    if !escape and ch'ch == 92 # `\\`
      escape = true
    else
      text:csAppend(cs, applyEscape(ch'ch, escape))
      escape = false
    /if
  /while

  if lex:lexerEof(lex)
    text:csFree(cs)
    lex'error = lex:errorLex(lex, "unexpected EOF in string body")
    return null
  /if

  if (ch = nextChar(lex))'ch != 34 # `"`
    text:csFree(cs)
    mut got [2] uint8
    got[0] = ch'ch
    got[1] = 0 # `\0` c string terminator

    lex'error = utils:issueToError(lex:errorMism(lex'lineno, "\"", ptr got[0]))
    return null
  /if

  return strtokNew(text:csUnwrap(cs), lex'lineno'lineno, begin, ch'pos)
/func


func lexExtractSym(lex ptr lex:Lexer) ptr lex:StringTok
  mut cs = text:csNew(10) #magic number
  mut i uintptr = 0
  mut ch Char
  mut first = true
  mut begin uintptr = 0

  while !lex:lexerEof(lex) and utils:charIsSym(lex'peek) and i < 2
    ch = nextChar(lex)
    if ch'ch == 0
      text:csFree(cs)
      return null
    /if

    if first
      begin = ch'pos
      first = false
    /if

    text:csAppend(cs, ch'ch)
  /while

  return strtokNew(text:csUnwrap(cs), lex'lineno'lineno, begin, ch'pos)
/func


func lexHandleId(lex ptr lex:Lexer) ptr lex:StringTok
  mut cs = text:csNew(10) #magic number
  mut ch Char
  mut begin uintptr
  mut first = true

  while utils:charIsIdVal(lex'peek)
    ch = nextChar(lex)
    if ch'ch == 0
      text:csFree(cs)
      return null
    /if

    if first
      begin = ch'pos
      first = false
    /if

    text:csAppend(cs, ch'ch)
  /while

  return strtokNew(text:csUnwrap(cs), lex'lineno'lineno, begin, ch'pos)
/func


func extractNextToken(lex ptr lex:Lexer) ptr lex:StringTok

  if base:streamEnded(lex'file)
    return null
  /if

  while utils:charIsWhite(lex'peek)
    mut ch = nextChar(lex)
    if ch'ch == 10 and !lex'firstLineTok #character `\n`
      lex'firstLineTok = true
      lex'newline = true
    /if
  /while
  if lex'peek == 0
    return null
  /if

  if lex'peek == 35 # character `#` - means the beginning of a single line comment
    lexDiscardComment(lex)
    if !lex:lexerEof(lex) and !lex'firstLineTok
      lex'newline = true
      lex'firstLineTok = true
    /if

    return extractNextToken(lex)
  /if

  if lex'peek == 34 # character `"` - means the beginning of a string
    return lexExtractString(lex)
  /if

  if utils:charIsSym(lex'peek)
    return lexExtractSym(lex)
  /if

  if utils:charIsPar(lex'peek)
    mut str = cast<ptr uint8>(mem:zalloc(2 * size(uint8)))
    mut par = nextChar(lex)
    str[0] = par'ch
    return strtokNew(str, lex'lineno'lineno, par'pos, par'pos)
  /if

  lex'firstLineTok = false

  return lexHandleId(lex)
/func


func lexerClose(lex ptr lex:Lexer)
  base:streamClose(lex'file)
  lex:linenoFree(lex'lineno)
  mem:free(lex)
/func


func lexerError(lexer ptr lex:Lexer) ptr err:Error
  return lexer'error
/func


func lexerFromStream(stream ptr base:Stream, name ptr uint8, err ptr ptr err:Error) ptr lex:Lexer
  mut ret = cast<ptr lex:Lexer>(mem:zalloc(size(lex:Lexer)))

  ret'file = stream
  ret'lineno = lex:linenoNew(text:strclone(name),0,0)
  ret'firstLineTok = true
  ret'firstLineLetter = true

  base:streamRead(stream, ptr ret'peek, 1)
  if (val err = base:streamError(stream)) != null
    return null
  /if

  return ret
/func

func lexerNew(fname ptr uint8, err ptr ptr err:Error) ptr lex:Lexer
  mut file = base:fileOpen(fname, err)

  if val err != null
    return null
  /if

  return lexerFromStream(file, fname, err)
/func

func lexerEof(lexer ptr lex:Lexer) bool
  return base:streamEnded(lexer'file)
/func

func tokenNew(type uint16, value uintptr, lineno ptr lex:Lineno, end uintptr) ptr lex:Token
  mut ret = cast<ptr lex:Token>(mem:alloc(size(lex:Token)))
  ret'type = type
  ret'endPos = end
  ret'lineno = lineno
  ret'value = value
  return ret
/func

func tokenFree(tok ptr lex:Token)
  if tok != null
    if (tok'type == lex:ID or tok'type == lex:STRING) and tok'value != 0
      mem:free(cast<data>(tok'value))
    /if
    lex:linenoFree(tok'lineno)
    mem:free(tok)
  /if
/func


func errorLex(lex ptr lex:Lexer, msg ptr uint8) ptr err:Error
  mut toglue [4] ptr uint8

  toglue[0] = lex'lineno'filename
  toglue[1] = ": "
  toglue[2] = msg
  toglue[3] = null

  return err:errorGlue(ptr toglue[0])
/func


func lexerNext(lex ptr lex:Lexer) ptr lex:Token
  if lexerEof(lex)
    return null
  /if

  if lexerError(lex) != null
    return null
  /if

  mut stringToken = lex'saved

  if lex'saved == null
    stringToken = extractNextToken(lex)
    if lexerError(lex) != null
      return null
    /if
  else
    lex'saved = null

    # this is needed because this field is set to false only by extractNextToken.
    # if the saved one is the firstLineTok, then the next extractNextToken will still think
    # we're at the beginning of the line. This fixes it.
    if lex'firstLineTok
      lex'firstLineTok = false
    /if
  /if

  if stringToken == null
    return null
  /if

  mut begin = lex:linenoClone(lex'lineno)
  begin'pos = stringToken'begin
  mut endPos = stringToken'end

  mut type uint16 = 0
  mut value uintptr = 0

  if lex'newline
    lex'saved = stringToken
    lex'newline = false

    begin'lineno--
    begin'pos = 0

    return tokenNew(lex:NEWLINE, 0, begin, 0)
  /if

  mut strToken = stringToken'str

  if val strToken == STX # is a constant string
    type = lex:STRING
    value = cast<uintptr>(text:strclone(strToken + 1))
  /if

  if text:strequals(strToken, "alias")
    type = lex:ALIAS
  /if

  if text:strequals(strToken, "&")
    type = lex:AMPER
  /if

  if text:strequals(strToken, "and")
    type = lex:AND
  /if

  if text:strequals(strToken, "'")
    type = lex:APOS
  /if

  if text:strequals(strToken, "=")
    type = lex:ASSIGN
  /if

  if text:strequals(strToken, "break")
    type = lex:BREAK
  /if

  if text:strequals(strToken, "cast")
    type = lex:CAST
  /if

  if text:strequals(strToken, "]")
    type = lex:CBRAC
  /if

  if text:strequals(strToken, ":")
    type = lex:COLON
  /if

  if text:strequals(strToken, ",")
    type = lex:COMMA
  /if

  if text:strequals(strToken, "continue")
    type = lex:CONTINUE
  /if

  if text:strequals(strToken, ")")
    type = lex:CPAR
  /if

  if text:strequals(strToken, "--")
    type = lex:DEC
  /if

  if text:strequals(strToken, "decl")
    type = lex:DECL
  /if

  if text:strequals(strToken, "!=")
    type = lex:DIFFERENT
  /if

  if text:strequals(strToken, "mod")
    type = lex:MOD
  /if

  if text:strequals(strToken, "/")
    if utils:charIsIdVal(lex'peek)
      lex'saved = extractNextToken(lex)
      if lexerError(lex) != null
        return null
      /if

      mut savedTok = lex'saved'str

      if text:strequals(savedTok, "entry")
        type = lex:ENDENTRY
      /if

      if text:strequals(savedTok, "func")
        type = lex:ENDFUNC
      /if

      if text:strequals(savedTok, "if")
        type = lex:ENDIF
      /if

      if text:strequals(savedTok, "while")
        type = lex:ENDWHILE
      /if

      if type != 0
        endPos = lex'saved'end
        mem:free(savedTok)
        strtokFree(lex'saved)
        lex'saved = null
      /if
    /if
    if type == 0 # nothing has been matched, so it is a `/`
        type = lex:DIV
    /if
  /if

  if text:strequals(strToken, "else")
    type = lex:ELSE
  /if

  if text:strequals(strToken, "entry")
    type = lex:ENTRY
  /if

  if text:strequals(strToken, "==")
    type = lex:EQUAL
  /if

  if text:strequals(strToken, "false")
    type = lex:FALSE
  /if

  if text:strequals(strToken, "=>")
    type = lex:FATARROW
  /if

  if text:strequals(strToken, "func")
    type = lex:FUNC
  /if

  if text:strequals(strToken, "if")
    type = lex:IF
  /if

  if text:strequals(strToken, "import")
    type = lex:IMPORT
  /if

  if text:strequals(strToken, "++")
    type = lex:INC
  /if

  if text:strequals(strToken, ">=")
    type = lex:MAJEQ
  /if

  if text:strequals(strToken, ">")
    type = lex:MAJOR
  /if

  if text:strequals(strToken, "<=")
    type = lex:MINEQ
  /if

  if text:strequals(strToken, "<")
    type = lex:MINOR
  /if

  if text:strequals(strToken, "-")
    type = lex:MINUS
  /if

  if text:strequals(strToken, "module")
    type = lex:MODULE
  /if

  if text:strequals(strToken, "mut")
    type = lex:MUT
  /if

  if text:strequals(strToken, "!")
    type = lex:NOT
  /if

  if text:strequals(strToken, "null")
    type = lex:NULLPTR
  /if

  if text:strequals(strToken, "[")
    type = lex:OBRAC
  /if

  if text:strequals(strToken, "(")
    type = lex:OPAR
  /if

  if text:strequals(strToken, "or")
    type = lex:OR
  /if

  if text:strequals(strToken, "|")
    type = lex:PIPE
  /if

  if text:strequals(strToken, "+")
    type = lex:PLUS
  /if

  if text:strequals(strToken, "**")
    type = lex:POW
  /if

  if text:strequals(strToken, "ptr")
    type = lex:PTR
  /if

  if text:strequals(strToken, "return")
    type = lex:RETURN
  /if

  if text:strequals(strToken, "||")
    type = lex:SEPARATOR
  /if

  if text:strequals(strToken, "size")
    type = lex:SIZE
  /if

  if text:strequals(strToken, "struct")
    type = lex:STRUCT
  /if

  if text:strequals(strToken, "*")
    type = lex:TIMES
  /if

  if text:strequals(strToken, "true")
    type = lex:TRUE
  /if

  if text:strequals(strToken, "::")
    type = lex:TWOCOLONS
  /if

  if text:strequals(strToken, "val")
    type = lex:VAL
  /if

  if text:strequals(strToken, "while")
    type = lex:WHILE
  /if

  if text:strequals(strToken, "^")
    type = lex:XOR
  /if

  if utils:strIsUInt(strToken)
    type = lex:NUMBER
    value = text:strtonum(strToken)
  /if

  if type == 0 # if it's still unmodified, then it's an identifier
    type = lex:ID
    value = cast<uintptr>(strToken)
  else
    mem:free(strToken)
  /if

  strtokFree(stringToken)

  return tokenNew(type, value, begin, endPos)
/func


func ttypeStr(tt uint16) ptr uint8
  if tt == lex:EOF
    return "Eof"
  /if

  if tt == lex:NEWLINE
    return "a newline"
  /if

  if tt == lex:ALIAS
    return "alias"
  /if

  if tt == lex:AMPER
    return "&"
  /if

  if tt == lex:AND
    return "and"
  /if

  if tt == lex:APOS
    return "'"
  /if

  if tt == lex:ASSIGN
    return "="
  /if

  if tt == lex:BREAK
    return "break"
  /if

  if tt == lex:CAST
    return "cast"
  /if

  if tt == lex:CBRAC
    return "]"
  /if

  if tt == lex:COLON
    return ":"
  /if

  if tt == lex:COMMA
    return ","
  /if

  if tt == lex:CONTINUE
    return "continue"
  /if

  if tt == lex:CPAR
    return ")"
  /if

  if tt == lex:DEC
    return "--"
  /if

  if tt == lex:DECL
    return "decl"
  /if

  if tt == lex:DIFFERENT
    return "!="
  /if

  if tt == lex:DIV
    return "/"
  /if

  if tt == lex:ELSE
    return "else"
  /if

  if tt == lex:ENDENTRY
    return "/entry"
  /if

  if tt == lex:ENDFUNC
    return "/func"
  /if

  if tt == lex:ENDIF
    return "/if"
  /if

  if tt == lex:ENDWHILE
    return "/while"
  /if

  if tt == lex:ENTRY
    return "entry"
  /if

  if tt == lex:EQUAL
    return "=="
  /if

  if tt == lex:FALSE
    return "false"
  /if

  if tt == lex:FATARROW
    return "=>"
  /if

  if tt == lex:FUNC
    return "func"
  /if

  if tt == lex:ID
    return "an identifier"
  /if

  if tt == lex:IF
    return "if"
  /if

  if tt == lex:IMPORT
    return "import"
  /if

  if tt == lex:INC
    return "++"
  /if

  if tt == lex:MAJEQ
    return ">="
  /if

  if tt == lex:MAJOR
    return ">"
  /if

  if tt == lex:MINEQ
    return "<="
  /if

  if tt == lex:MINOR
    return "<"
  /if

  if tt == lex:MINUS
    return "-"
  /if

  if tt == lex:MOD
    return "mod"
  /if

  if tt == lex:MODULE
    return "module"
  /if

  if tt == lex:MUT
    return "mut"
  /if

  if tt == lex:NOT
    return "!"
  /if

  if tt == lex:NULLPTR
    return "null"
  /if

  if tt == lex:NUMBER
    return "a number"
  /if

  if tt == lex:OBRAC
    return "["
  /if

  if tt == lex:OPAR
    return "("
  /if

  if tt == lex:OR
    return "or"
  /if

  if tt == lex:PIPE
    return "|"
  /if

  if tt == lex:PLUS
    return "+"
  /if

  if tt == lex:POW
    return "**"
  /if

  if tt == lex:PTR
    return "ptr"
  /if

  if tt == lex:RETURN
    return "return"
  /if

  if tt == lex:SEPARATOR
    return "||"
  /if

  if tt == lex:SIZE
    return "size"
  /if

  if tt == lex:STRING
    return "a string"
  /if

  if tt == lex:STRUCT
    return "struct"
  /if

  if tt == lex:TIMES
    return "*"
  /if

  if tt == lex:TRUE
    return "true"
  /if

  if tt == lex:UMINUS
    return "- (Unary)"
  /if

  if tt == lex:VAL
    return "val"
  /if

  if tt == lex:WHILE
    return "while"
  /if

  if tt == lex:XOR
    return "^"
  /if

  return "<unknown, please, report!>"
/func


func tokenStr(tok ptr lex:Token) ptr uint8
  return lex:ttypeStr(tok == null => lex:EOF || tok'type)
/func


func linenoClone(lineno ptr lex:Lineno) ptr lex:Lineno
  return lex:linenoNew(text:strclone(lineno'filename), lineno'lineno, lineno'pos)
/func


func linenoFree(lineno ptr lex:Lineno)
  if lineno != null
    mem:free(lineno'filename)
    mem:free(lineno)
  /if
/func


func linenoNew(filename ptr uint8, lineno, pos uintptr) ptr lex:Lineno
  mut ret = cast<ptr lex:Lineno>(mem:alloc(size(lex:Lineno)))

  ret'filename = filename
  ret'lineno = lineno
  ret'pos = pos

  return ret
/func


func issueFromLexError(err ptr err:Error, lineno ptr lex:Lineno) ptr utils:Issue
  if err == null
    return null
  /if

  mut where utils:Line
  where'line = lineno'lineno
  where'pos = lineno'pos

  mut ret = utils:issueNew(utils:ISSUE_ERR, where, lineno'filename, err'msg)

  err:errorFree(err)

  return ret
/func


func lineMake(llin ptr lex:Lineno) utils:Line
  mut ret utils:Line

  ret'line = llin'lineno
  ret'pos =  llin'pos

  return ret
/func


func tokExtractBegin(tok ptr lex:Token) utils:Line
  mut ret utils:Line
  ret'line = tok'lineno'lineno
  ret'pos = tok'lineno'pos

  return ret
/func


func tokExtractEnd(tok ptr lex:Token) utils:Line
  mut ret utils:Line
  ret'line = tok'lineno'lineno
  ret'pos = tok'endPos

  return ret
/func


func tokDiscardBegin(tok ptr lex:Token) utils:Line
  mut ret = tokExtractBegin(tok)

  lex:tokenFree(tok)

  return ret
/func


func tokDiscardEnd(tok ptr lex:Token) utils:Line
  mut ret = tokExtractEnd(tok)

  lex:tokenFree(tok)

  return ret
/func


func error(lineno ptr lex:Lineno, msg ptr uint8) ptr utils:Issue
  mut line utils:Line
  line'line = lineno'lineno
  line'pos = lineno'pos

  return utils:issueNew(utils:ISSUE_ERR, line, lineno'filename, msg)
/func


func errorMism(lineno ptr lex:Lineno, exp ptr uint8, got ptr uint8) ptr utils:Issue

  mut toglue [5] ptr uint8
  toglue[0] = "expected "
  toglue[1] = exp
  toglue[2] = ", got "
  toglue[3] = got
  toglue[4] = null

  mut glued = text:strglue(ptr toglue[0])
  mut ret =  lex:error(lineno, glued)

  mem:free(glued)

  return ret
/func
