#  Second Step - Experimental Fork Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014, 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.

import base

decl __fork_entry func()

func __forkpow(base,exp uintptr) uintptr

  if exp == 0
    return 1
  /if

  if base == 1
    return 1
  /if

  if base == 0
    return 0
  /if

  mut ret uintptr = 1
  mut i uintptr = 1

  while i <= exp
    ret = ret * base
    i++
  /while

  return ret

/func

mut __forkprogArgs base:Args

func main(argc intptr, argv ptr ptr uint8) int8
  __forkprogArgs'len = cast<uintptr>(argc - 1)
  __forkprogArgs'progname = val argv
  __forkprogArgs'args = argv + 1
  __fork_entry()
  return 0
/func
