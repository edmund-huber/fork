#  ctrans, Fork to C transpiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module ctrans


import ast
import ctrans
import list
import map
import pair
import txt


func ctransGenImports(tr ptr ctrans:Transl,
                      root ptr ast:PRoot)

  mut i uintptr = 0
  mut len = list:listLen(root'imports)

  while i < len
    mut impdef = cast<ptr ast:StringDef>(val list:listGet(root'imports, i))

    ctrans:translFordInc(tr, impdef'name)

    i++
  /while
/func


func ctransGenTypedefs(tr ptr ctrans:Transl,
                       root ptr ast:PRoot)

  mut iter = map:mapiterStart(root'aliases'syms)
  mut pair ptr pair:Pair = null

  while (pair = map:mapiterNext(iter)) != null
    mut name = cast<ptr uint8>(pair'key)
    mut type = cast<ptr ast:DeclInfo>(pair'value)'type

    ctrans:translTypedef(tr, name, type)
  /while

  map:mapiterFree(iter)
/func


# if ford is true, than emit include guards.
func ctransTranslate(tr ptr ctrans:Transl,
                     root ptr ast:PRoot)

  ctransGenImports(tr, root)
  ctransGenTypedefs(tr, root)

/func
