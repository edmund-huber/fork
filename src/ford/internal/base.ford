#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014, 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module base


import err
import io


alias comparer ptr func(val1, val2 data) int8


# pair structure
alias Pair struct (
  key, value data
)


# map structures

alias Mnode struct (
  left, right ptr Mnode,
  key, value data,
  color bool,
  freewhat uint8,
  cmp comparer
)


alias Map struct (
  root ptr Mnode,
  len uintptr,
  cmp comparer
)


alias MapIter struct (
  map ptr Map,
  lastKey data,
  begin bool
)


# list structures
alias Lnode struct(
  prec, next ptr Lnode,
  value uintptr
)


alias List struct(
  start, end ptr Lnode,
  len uintptr,

  current ptr Lnode,
  pos uintptr
)


# args structure
alias Args struct (
  len uintptr,
  progname ptr uint8,
  args ptr ptr uint8
)


# System functions
decl abort func()
decl exit func(retval int16)


# pair functions

decl pairFree func(pair ptr Pair)
decl pairNew func(item1,item2 data) ptr Pair


# lists functions

decl listAdd ptr func(list ptr List, index uintptr, item data) intptr
decl listAddint func(list ptr List, index uintptr, item uintptr) intptr
decl listAppend ptr func(list ptr List, item data) intptr
decl listAppendint func(list ptr List, item uintptr) intptr
decl listDeinit func(list ptr List)
decl listDeinitAll func(list ptr List, freeFunc ptr func(item data))
decl listExtract func(list ptr List, from uintptr, len intptr) ptr List
decl listFree func(list ptr List)
decl listFreeAll func(list ptr List, freeFunc ptr func(item data))
decl listFreeContents func(list ptr List, freeFunc ptr func(item data))
decl listGet ptr func(list ptr List, index uintptr) ptr data
decl listGetint func(list ptr List, index uintptr) ptr uintptr
decl listInit func(list ptr List) ptr List
decl listInsert ptr func(list ptr List, index uintptr, item data) intptr
decl listInsertint func(list ptr List, index uintptr, item uintptr) intptr
decl listLen func(list ptr List) uintptr
decl listNew func() ptr List
decl listPop ptr func(list ptr List) data
decl listPopint func(list ptr List) uintptr
decl listPrint func(list ptr List)
decl listPrune func(list ptr List)
decl listPush ptr func(list ptr List, item data)
decl listPushint func(list ptr List, item uintptr)
decl listRemove func(list ptr List, item uintptr, freefunc ptr func(item data)) bool
decl listSeek func(list ptr List, pos uintptr)
decl listSeekZero func(list ptr List)
decl listShallowCopy func(list ptr List) ptr List


# map functions

decl mapContains func(map ptr Map, key data) bool
decl mapDeinit func(map ptr Map)
decl mapDeinitSpec func(map ptr Map, freeKey ptr func(item data), freeVal ptr func(item data))
decl mapFirst func(map ptr Map) ptr Pair
decl mapFree func(map ptr Map)
decl mapFreeSpec func(map ptr Map, freeKey ptr func(item data), freeVal ptr func(item data))
decl mapGet func(map ptr Map, key data, value ptr data) bool
decl mapInit func(map ptr Map, cmp comparer) ptr Map
decl mapLen func(map ptr Map) uintptr
decl mapNew func(cmp comparer) ptr Map
decl mapPut func(map ptr Map, key data, value data, freewhat uint8) data
decl mapRemove func(map ptr Map, key data) bool

decl strmapInit func(map ptr Map) ptr Map
decl strmapNew func() ptr Map


# mapiter functions

decl mapiterStart func(map ptr Map) ptr MapIter
decl mapiterNext func(map ptr MapIter) ptr Pair
decl mapiterFree func(map ptr MapIter)


# map values
decl FREE_NONE uint8
decl FREE_KEY uint8
decl FREE_VALUE uint8


# args functions
decl args func() ptr Args


# generical declarations
decl abs func(num intptr) uintptr
decl getenv func(variable ptr uint8) ptr uint8
