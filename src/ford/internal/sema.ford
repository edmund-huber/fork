#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module sema


import ast
import kv
import list
import parser
import utils


alias Resolver struct (
  ctx ptr parser:Context,
  root ptr ast:PRoot,
  aliases,decls ptr kv:KVList
)


decl func resolverCollect(rsv ptr Resolver,
                          ctx ptr parser:Context,
                          root ptr ast:PRoot,
                          errors ptr list:List) ptr kv:KVList

decl func resolverDeinit(rsv ptr Resolver)


decl func registerAlias(rsv Resolver,
                        pdecl ptr ast:PDecl,
                        errors ptr list:List) ptr ast:Type

decl func registerDecl(rsv Resolver,
                       pdecl ptr ast:PDecl,
                       name ptr uint8,
                       type ptr ast:Type,
                       declType uint16,
                       errors ptr list:List) ptr ast:Type

decl func registerTopDecl(rsv Resolver,
                          pdecl ptr ast:PDecl,
                          errors ptr list:List) ptr ast:Type


decl func resolveDeclType(rsv Resolver,
                          name ptr uint8,
                          node ptr ast:PNode,
                          recList,errors ptr list:List) ptr ast:Type

decl func resolveType(rsv Resolver,
                      ptype ptr ast:PType,
                      errors ptr list:List) ptr ast:Type

decl func resolveTypeName(rsv Resolver,
                          name ptr uint8,
                          errors ptr list:List) ptr ast:Type

decl func validateExprRecl(rsv Resolver,
                           pexpr ptr ast:PExpr,
                           recList,errors ptr list:List) ptr ast:Type

decl func validateExpr(rsv Resolver,
                       pexpr ptr ast:PExpr,
                       errors ptr list:List) ptr ast:Type

decl func validateFunc(rsv Resolver,
                       pdecl ptr ast:PDecl,
                       funcType ptr ast:Type,
                       errors ptr list:List) bool


decl func semaValidateAstRoot(ctx ptr parser:Context,
                              root ptr ast:PRoot,
                              errors ptr list:List) bool

# validates the AST, and returns a list of the issues found.
decl func semaValidateAst(context ptr parser:Context,
                          root ptr ast:PNode) ptr list:List

# ast sema operations

decl func findAliasImport(ctx ptr parser:Context, moduleName,name ptr uint8) ptr ast:Type
decl func findAliasLocal(node ptr ast:PNode, name ptr uint8) ptr ast:Type

decl func findMethod(rsv Resolver,
                     node ptr ast:PNode,
                     typeModule,typeName,methodName ptr uint8) ptr ast:Type

decl func findRecAlias(ctx ptr parser:Context, scope ptr ast:PNode, ralias ptr ast:Type) ptr ast:Type

decl func findSymModule(ctx ptr parser:Context, moduleName, name ptr uint8) ptr ast:Type

decl func typeIsAssignable(ctx ptr parser:Context, scope ptr ast:PNode, dest,src ptr ast:Type) bool
decl func typeIsCastable(ctx ptr parser:Context, scope ptr ast:PNode, dest,src ptr ast:Type) bool
decl func typeChooseLarger(ctx ptr parser:Context, scope ptr ast:PNode, dest,src ptr ast:Type) bool
