#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module sema


import ast
import kv
import list
import parser
import utils


alias Resolver struct (
  prs ptr parser:Parser,
  curRoot ptr ast:PRoot,
  aliases,decls ptr kv:KVList,
  issues ptr ast:Issues
)


decl func resolverDeinit(rsv ptr Resolver)


decl method Resolver.collect(prs ptr parser:Parser,
                             pmod ptr ast:PModule,
                             issues ptr ast:Issues) ptr kv:KVList

decl method Resolver.findAliasImport(moduleName,name ptr uint8) ptr ast:Type

decl method Resolver.findMethod(node ptr ast:PNode,
                     typeModule,typeName,methodName ptr uint8) ptr ast:Type

decl method Resolver.findRecAlias(scope ptr ast:PNode, ralias ptr ast:Type) ptr ast:Type
decl method Resolver.findSymModule(moduleName, name ptr uint8) ptr ast:Type

decl method Resolver.registerAlias(pdecl ptr ast:PDecl) ptr ast:Type

decl method Resolver.registerDecl(pdecl ptr ast:PDecl,
                                  name ptr uint8,
                                  type ptr ast:Type,
                                  declType uint16) ptr ast:Type

decl method Resolver.registerTopDecl(pdecl ptr ast:PDecl) ptr ast:Type


decl method Resolver.resolveDeclType(name ptr uint8,
                                     node ptr ast:PNode,
                                     recList ptr list:List) ptr ast:Type

decl method Resolver.resolveType(ptype ptr ast:PType) ptr ast:Type

decl method Resolver.resolveTypeName(name ptr uint8) ptr ast:Type


decl method Resolver.setCurrentRoot(root ptr ast:PRoot)

decl method Resolver.typeIsAssignable(scope ptr ast:PNode, dest,src ptr ast:Type) bool
decl method Resolver.typeIsCastable(scope ptr ast:PNode, dest,src ptr ast:Type) bool
decl method Resolver.typeChooseLarger(scope ptr ast:PNode, dest,src ptr ast:Type) bool

decl method Resolver.validateExprRecl(pexpr ptr ast:PExpr,
                                      recList ptr list:List) ptr ast:Type

decl method Resolver.validateExpr(pexpr ptr ast:PExpr) ptr ast:Type

decl method Resolver.validateFunc(pdecl ptr ast:PDecl,
                                  funcType ptr ast:Type) bool

# validates the AST, and returns a list of the issues found.
decl func validateAst(prs ptr parser:Parser,
                      root ptr ast:PNode) ptr ast:Issues

decl func validateModuleAst(prs ptr parser:Parser,
                            pmod ptr ast:PModule) ptr ast:Issues


decl method ast:PExpr.isCompileConst() bool
decl method ast:PNode.findAliasLocal(name ptr uint8) ptr ast:Type
