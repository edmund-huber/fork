#  Second Step - Experimental Fork Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.

module synt

import ast
import lex
import spring
import utils

alias Parser struct(
  filename ptr uint8,
  err ptr utils:Issue
)

alias ParserContext struct (
  prs ptr Parser,
  lex ptr lex:Lexer,
  next ptr lex:Token,
  last ptr lex:Lineno
)

decl parserParseExpr func(ctx ptr ParserContext) ptr ast:PExpr

decl parserParseType func(ctx ptr ParserContext) ptr ast:PType

decl nextTok func(ctx ptr ParserContext) ptr lex:Token
decl discardTok func(ctx ptr ParserContext)

decl parserFree func(prs ptr Parser)
decl parserNew func(file ptr uint8) ptr Parser
decl parserParse func(prs ptr Parser) ptr ast:PNode

decl expect func(ctx ptr ParserContext, tokType uint16) ptr lex:Token
decl expectDiscard func(ctx ptr ParserContext, tokType uint16) bool

decl isBinary func(tok ptr lex:Token) bool
decl isConst func(tok ptr lex:Token) bool
decl isUnary func(tok ptr lex:Token) bool
