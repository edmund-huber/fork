#  Second Step - Experimental Fork Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.

module synt

import lex
import spring
import syms
import utils

alias Parser struct(
  filename ptr uint8,
  err ptr utils:Issue
)

alias ParserContext struct (
  prs ptr Parser,
  lex ptr lex:Lexer,
  next ptr lex:Token,
  last ptr utils:LexLineno
)

decl lineMake func(lexl ptr utils:LexLineno) utils:Line

alias PNode struct(
  type uint16,
  value uintptr,
  parent ptr PNode,
  leaves ptr spring:Vector,
  begin, end utils:Line,
  semaData data,
  semaDataFinalize ptr func(semaData data)
)

decl pnodeDump func(node ptr PNode)
decl pnodeNew func(ptype uint16, value uintptr) ptr PNode
decl pnodeAppendChild func(parent ptr PNode, child ptr PNode) ptr PNode
decl pnodeFree func(pnode ptr PNode)

alias StringDef struct(
  name ptr uint8,
  begin,end utils:Line
)

decl strdefFree func(strdef ptr StringDef)
decl strdefNew func(name ptr uint8, begin,end utils:Line) ptr StringDef

alias PProgram struct(
  node PNode,
  moduleName ptr StringDef,
  imports ptr spring:Vector
)

decl isPProgram func(node ptr PNode) bool
decl pprogramNew func(modName ptr StringDef, imports ptr spring:Vector) ptr PProgram

alias PDecl struct(
  node PNode,
  sym ptr syms:Symbol
)

decl isPDecl func(node ptr PNode) bool
decl pdeclNew func(ptype uint16, sym ptr syms:Symbol) ptr PDecl

alias PExpr struct(
  node PNode,
  opType uint16,
  type ptr syms:Type
)

decl isPExpr func(node ptr PNode) bool
decl parserParseExpr func(ctx ptr ParserContext) ptr PExpr

decl parserParseType func(ctx ptr ParserContext) ptr syms:Type

decl nextTok func(ctx ptr ParserContext) ptr lex:Token
decl discardTok func(ctx ptr ParserContext)

decl tokExtractBegin func(tok ptr lex:Token) utils:Line
decl tokExtractEnd func(tok ptr lex:Token) utils:Line

decl tokDiscardEnd func(tok ptr lex:Token) utils:Line
decl tokDiscardBegin func(tok ptr lex:Token) utils:Line

decl parserFree func(prs ptr Parser)
decl parserNew func(file ptr uint8) ptr Parser
decl parserParse func(prs ptr Parser) ptr PNode

decl expect func(ctx ptr ParserContext, tokType uint16) ptr lex:Token
decl expectDiscard func(ctx ptr ParserContext, tokType uint16) bool

decl emptyExpr PExpr

decl PPROGRAM   uint16
decl PENTRY     uint16
decl PEXPR      uint16
decl PFUNCTION  uint16
decl PALIAS     uint16
decl PDECL      uint16
decl PMUT       uint16
decl PBREAK     uint16
decl PCONTINUE  uint16
decl PRETURN    uint16
decl PIF        uint16
decl PIFELSE    uint16
decl PWHILE     uint16
decl PBLOCK     uint16
