#  Second Step - Experimental Fork Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.

module synt

import lex
import spring
import utils

alias Parser struct(
  filename ptr uint8,
  err ptr spring:Error
)

alias Context struct (
  prs ptr Parser,
  lex ptr lex:Lexer,
  next ptr lex:Token,
  last lex:Lineno
)

alias PNode struct(
  type uint16,
  value uintptr,
  parent ptr PNode,
  leaves ptr spring:Vector
)

decl pnodeNew func(ptype uint16, value uintptr) ptr PNode
decl pnodeAppendChild func(parent ptr PNode, child ptr PNode) ptr PNode
decl pnodeFree func(pnode ptr PNode)

alias PProgram struct(
  node PNode,
  moduleName ptr uint8,
  imports ptr spring:Vector
)

decl pprogramNew func(modName ptr uint8, imports ptr spring:Vector) ptr PProgram

decl TYPE_FUNC   uint16
decl TYPE_NUM    uint16
decl TYPE_PTR    uint16
decl TYPE_STRUCT uint16

alias Type struct (
  refc utils:Ref,
  name, moduleName ptr uint8,
  # anonymous because of first-step parser limitations; actually a TypeDescr
  descr data
)

alias TypeDescr struct (
  refc utils:Ref,
  type uint16,
  # if type is TYPE_PTR, this is the type returned by dereferencing.
  # if type is TYPE_FUNC, this is the return type of the function
  retType ptr Type,
  # if type is TYPE_FUNC, this is the arguments list
  # if type is TYPE_STRUCT, this is the fields list
  arguments ptr spring:List
)

decl typeFree func(type ptr Type)
decl typeNew func(name,moduleName ptr uint8, descr ptr TypeDescr) ptr Type

decl typeDescrFree func(descr ptr TypeDescr)
decl typeDescrNew func(type uint16, retType ptr Type, params ptr spring:List) ptr TypeDescr

decl parserParseType func(ctx ptr Context) ptr Type

alias Symbol struct(
  name ptr uint8,
  type ptr Type
)

decl symbolFree func(sym ptr Symbol)
decl symbolNew func(name ptr uint8, type ptr Type) ptr Symbol

alias Alias Symbol

decl aliasFree ptr func(item ptr Alias)
decl aliasNew ptr func(name ptr uint8, type ptr Type) ptr Alias

alias PDecl struct(
  node PNode,
  name ptr uint8,
  type ptr Type
)

decl pdeclNew func(ptype uint16, name ptr uint8, type ptr Type) ptr PDecl

alias PExpr struct(
  node PNode,
  opType uint16,
  type ptr Type
)

decl parserParseExpr func(ctx ptr Context) ptr PExpr

decl nextTok func(ctx ptr Context) ptr lex:Token
decl discardTok func(ctx ptr Context)

decl parserFree func(prs ptr Parser)
decl parserNew func(file ptr uint8) ptr Parser
decl parserParse func(prs ptr Parser) ptr PNode

decl expect func(ctx ptr Context, tokType uint16) ptr lex:Token
decl expectDiscard func(ctx ptr Context, tokType uint16) bool

decl emptyExpr PExpr

decl PPROGRAM   uint16
decl PENTRY     uint16
decl PEXPR      uint16
decl PFUNCTION  uint16
decl PALIAS     uint16
decl PDECL      uint16
decl PVAR       uint16
decl PBREAK     uint16
decl PCONTINUE  uint16
decl PRETURN    uint16
decl PIF        uint16
decl PWHILE     uint16
