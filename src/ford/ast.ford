#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module ast

import base
import lex
import map
import text
import utils


# PType and PTypeDescr do not represent a type, but its parse-time representation.
# Per example, uint16 and PType are bot "id-types", because they are syntactically presented by
# an identifier at parsing time, while being really very different (a struct and an integer).

alias PType struct (
  refc utils:Ref,
  name, moduleName ptr uint8,
  # anonymous because of first-step parser limitations; actually a PTypeDescr
  descr data,
  begin, end utils:Line
)

alias PTypeDescr struct (
  refc utils:Ref,
  type uint16,
  # if type is PTYPE_PTR or PTYPE_LOC, this is the type returned by dereferencing.
  # if type is PTYPE_FUNC, this is the return type of the function
  retType ptr PType,
  # if type is PTYPE_FUNC, this is the arguments list
  # if type is PTYPE_STRUCT, this is the fields list
  arguments ptr base:List,
  #if type is PTYPE_LOC, this is the number of items allocated
  length uintptr
)

decl ptypeDump func(ptype ptr PType)
decl ptypeNew func(name,moduleName ptr uint8, descr ptr PTypeDescr) ptr PType

decl ptypeDescrDump func(ptype ptr PTypeDescr)
decl ptypeDescrNew func(ptype uint16, retPType ptr PType, params ptr base:List) ptr PTypeDescr
decl ptypeDescrNewLoc func(innerPType ptr PType, length uintptr) ptr PTypeDescr

alias PSymbol struct(
  refc utils:Ref,
  name ptr uint8,
  type ptr PType
)

decl psymbolNew func(name ptr uint8, type ptr PType) ptr PSymbol


# Type represents a well formed, semantically valid type.
# An instance of this is the product of type validation by sema.

alias Type struct(
  # which type macroclass this instance represents.
  type uint16,

  # eventual alias (module and name) of the current type.
  moduleName, name ptr uint8,

  # if integer, this represent its signedness.
  isSigned bool,

  # size of this type. Set on creation. -1 if recursive.
  # functions have no size.
  # alignment of this type. Set on creation. -1 if recursive.
  typeSize, typeAlign intptr,

  # number of items, in case this is a location.
  itemCount uintptr,

  # the type the current instance evaluates to when an operation like function invocation or derefereciation is made.
  # For pointers, this is the type of the expression obtained with val.
  # For functions, this is the value of the expression obtained invoking the function.
  retType ptr Type,

  # The members that compose this type.
  # For functions, these are the parameters.
  # For structures, these are the members.
  members ptr utils:KVList,

  # if this type is builtin
  builtin bool,

  # where the original type was defined.
  begin, end utils:Line
)

alias Symbol struct(
  name ptr uint8,
  type ptr Type
)

decl symbolClone func(sym ptr Symbol) ptr Symbol
decl symbolDump func(cs ptr text:Charstash, sym ptr Symbol)
decl symbolEquals func(sym1,sym2 ptr Symbol) bool
decl symbolFree func(sym ptr Symbol)
decl symbolNew func(name ptr uint8, type ptr Type) ptr Symbol
decl symbolSummarize func(cs ptr text:Charstash, sym ptr Symbol)

decl builtinSetNew func() ptr map:Map

decl typeClone func(pool ptr utils:FreePool, type ptr Type) ptr Type
decl typeDump func(cs ptr text:Charstash, type ptr Type)
decl typeEquals func(type1, type2 ptr Type) bool
decl typeFree func(type ptr Type)
decl typeIsBool func(type ptr Type) bool
decl typeIsData func(type ptr Type) bool
decl typeIsFunc func(type ptr Type) bool
decl typeIsInt func(type ptr Type) bool
decl typeIsLoc func(type ptr Type) bool
decl typeIsNull func(type ptr Type) bool
decl typeIsPtr func(type ptr Type) bool
decl typeIsStruct func(type ptr Type) bool
decl typeNewFunc func(pool ptr utils:FreePool, moduleName, name ptr uint8, retVal ptr Type, members ptr utils:KVList) ptr Type
decl typeNewLoc func(pool ptr utils:FreePool, moduleName, name ptr uint8, itemCount uintptr, retVal ptr Type) ptr Type
decl typeNewPtr func(pool ptr utils:FreePool, moduleName, name ptr uint8, retVal ptr Type) ptr Type
decl typeNewRecursiveAlias func(pool ptr utils:FreePool, moduleName, name ptr uint8) ptr Type
decl typeNewStruct func(pool ptr utils:FreePool, moduleName, name ptr uint8, members ptr utils:KVList) ptr Type
decl typeSetAlias func(type ptr Type, moduleName, name ptr uint8)
decl typeSetBoundaries func(type ptr Type, begin,end utils:Line)
decl typeSummarize func(cs ptr text:Charstash, type ptr Type)

alias DeclInfo struct(
  declType uint16,
  type ptr Type
)

decl declInfoFree func(declInfo ptr DeclInfo)
decl declInfoNew func(declType uint16, type ptr Type) ptr DeclInfo

alias Symtable struct(
  syms ptr map:Map
)

decl stabNew func() ptr Symtable
decl stabAdd func(stab ptr Symtable, name ptr uint8, type ptr Type, symType uint16)
decl stabGet func(stab ptr Symtable, name ptr uint8) ptr DeclInfo
decl stabTypeof func(stab ptr Symtable, name ptr uint8) ptr Type
decl stabFree func(stab ptr Symtable)

decl declDump func(prefix,name ptr uint8, type ptr Type)
# end symbols

# begin pnode

alias PNode struct(
  type uint16,
  value uintptr,
  parent ptr PNode,
  leaves ptr base:List,
  begin, end utils:Line,
  validated bool
)

decl pnodeAppendChild func(parent ptr PNode, child ptr PNode) ptr PNode
decl pnodeDump func(node ptr PNode)
decl pnodeFree func(pnode ptr PNode)
decl pnodeIsBreakContinue func(pnode ptr PNode) bool
decl pnodeIsDecl func(pnode ptr PNode) bool
decl pnodeIsExpr func(pnode ptr PNode) bool
decl pnodeIsIf func(pnode ptr PNode) bool
decl pnodeIsReturn func(pnode ptr PNode) bool
decl pnodeIsWhile func(pnode ptr PNode) bool
decl pnodeNew func(ptype uint16, value uintptr) ptr PNode

alias PBlock struct(
  node PNode,
  syms ptr Symtable
)

decl isPBlock func(node ptr PNode) bool
decl pblockNew func() ptr PBlock

alias StringDef struct(
  name ptr uint8,
  begin,end utils:Line
)

decl strdefFree func(strdef ptr StringDef)
decl strdefNew func(name ptr uint8, begin,end utils:Line) ptr StringDef

alias PDecl struct(
  node PNode,
  sym ptr PSymbol
)

decl isPDecl func(node ptr PNode) bool
decl pdeclNew func(ptype uint16, sym ptr PSymbol) ptr PDecl

alias PRoot struct(
  node PBlock,
  moduleName ptr StringDef,
  fileName ptr uint8,
  imports ptr base:List,
  aliases ptr Symtable,
  typePool ptr utils:FreePool,
  entryNode ptr PDecl
)

decl isPRoot func(node ptr PNode) bool
decl prootHasImported func(root ptr PRoot, name ptr uint8) bool
decl prootNew func(modName ptr StringDef, imports ptr base:List, fileName ptr uint8) ptr PRoot

alias PExpr struct(
  node PNode,
  opType uint16,
  constant bool,
  type ptr Type
)

decl pexprNew func(tok ptr lex:Token, lhs,rhs ptr PExpr, begin,end utils:Line) ptr PExpr
decl pexprTernaryNew func(tok ptr lex:Token, lhs,mid,rhs ptr PExpr, begin,end utils:Line) ptr PExpr
decl pexprNewSingle func(tok ptr lex:Token) ptr PExpr
decl isPExpr func(node ptr PNode) bool

decl emptyExpr PExpr

decl PROOT   uint16
decl PENTRY     uint16
decl PEXPR      uint16
decl PFUNCTION  uint16
decl PALIAS     uint16
decl PDECL      uint16
decl PMUT       uint16
decl PBREAK     uint16
decl PCONTINUE  uint16
decl PRETURN    uint16
decl PIF        uint16
decl PIFELSE    uint16
decl PWHILE     uint16
decl PBLOCK     uint16

#end pnode

# symbols

decl PTYPE_FUNC   uint16
decl PTYPE_ID     uint16
decl PTYPE_PTR    uint16
decl PTYPE_STRUCT uint16
decl PTYPE_LOC    uint16


decl TYPE_EMPTY     uint16
decl TYPE_FUNC      uint16
decl TYPE_PTR       uint16
decl TYPE_STRUCT    uint16
decl TYPE_LOC       uint16
decl TYPE_BOOL      uint16
decl TYPE_INT       uint16
decl TYPE_DATA      uint16
decl TYPE_RECALIAS uint16
decl TYPE_NULL      uint16
