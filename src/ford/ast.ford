#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module ast


import kv
import list
import map
import mem
import txt


alias Line struct(
  line, pos uintptr
)


# PType and PTypeDescr do not represent a type, but its parse-time representation.
# Per example, uint16 and PType are bot "id-types", because they are syntactically presented by
# an identifier at parsing time, while being really very different (a struct and an integer).

alias PType struct (
  refc mem:Ref,
  name, moduleName ptr uint8,
  # anonymous because of first-step parser limitations; actually a PTypeDescr
  descr data,
  begin, end Line
)


alias PTypeDescr struct (
  refc mem:Ref,
  type uint16,
  # if type is PTYPE_PTR or PTYPE_LOC, this is the type returned by dereferencing.
  # if type is PTYPE_FUNC, this is the return type of the function
  retType ptr PType,
  # if type is PTYPE_FUNC, this is the arguments list
  # if type is PTYPE_STRUCT, this is the fields list
  arguments ptr list:List,
  #if type is PTYPE_LOC, this is the number of items allocated
  length uintptr
)

decl func ptypeDump(ptype ptr PType)

decl func ptypeDescrDump(ptype ptr PTypeDescr)

alias PSymbol struct(
  refc mem:Ref,
  name ptr uint8,
  type ptr PType
)


# Type represents a well formed, semantically valid type.
# An instance of this is the product of type validation by sema.

alias Type struct(
  # which type macroclass this instance represents.
  type uint16,

  # eventual alias (module and name) of the current type.
  moduleName, name ptr uint8,

  # if integer, this represent its signedness.
  isSigned bool,

  # size of this type. Set on creation. -1 if recursive.
  # functions have no size.
  # alignment of this type. Set on creation. -1 if recursive.
  typeSize, typeAlign intptr,

  # number of items, in case this is a location.
  itemCount uintptr,

  # the type the current instance evaluates to when an operation like function invocation or derefereciation is made.
  # For pointers, this is the type of the expression obtained with val.
  # For functions, this is the value of the expression obtained invoking the function.
  retType ptr Type,

  # The members that compose this type.
  # For functions, these are the parameters.
  # For structures, these are the members.
  members ptr kv:KVList,

  # if this type is builtin
  builtin bool,

  # where the original type was defined.
  begin, end Line
)

alias Symbol struct(
  name ptr uint8,
  type ptr Type
)


decl func symbolDump(cs ptr txt:Charstash, sym ptr Symbol)
decl func symbolEquals(sym1,sym2 ptr Symbol) bool
decl func symbolSummarize(cs ptr txt:Charstash, sym ptr Symbol)

decl func typeDump(cs ptr txt:Charstash, type ptr Type)
decl func typeEquals(type1, type2 ptr Type) bool
decl func typeFree(type ptr Type)
decl func typeIsBool(type ptr Type) bool
decl func typeIsData(type ptr Type) bool
decl func typeIsFunc(type ptr Type) bool
decl func typeIsInt(type ptr Type) bool
decl func typeIsLoc(type ptr Type) bool
decl func typeIsNull(type ptr Type) bool
decl func typeIsPtr(type ptr Type) bool
decl func typeIsStruct(type ptr Type) bool
decl func typeSummarize(cs ptr txt:Charstash, type ptr Type)


alias DeclInfo struct(
  declType uint16,
  type ptr Type
)

alias Symtable struct(
  syms ptr kv:KVList
)

decl func stabNew() ptr Symtable
decl func stabAdd(stab ptr Symtable, name ptr uint8, type ptr Type, symType uint16)
decl func stabGet(stab ptr Symtable, name ptr uint8) ptr DeclInfo
decl func stabTypeof(stab ptr Symtable, name ptr uint8) ptr Type
decl func stabFree(stab ptr Symtable)


decl func declDump(prefix,name ptr uint8, type ptr Type)
# end symbols

# begin pnode

alias PNode struct(
  type uint16,
  value uintptr,
  parent ptr PNode,
  leaves ptr list:List,
  begin, end Line,
  validated bool
)

decl func pnodeDump(node ptr PNode)
decl func pnodeFree(pnode ptr PNode)
decl func pnodeIsBreakContinue(pnode ptr PNode) bool
decl func pnodeIsDecl(pnode ptr PNode) bool
decl func pnodeIsExpr(pnode ptr PNode) bool
decl func pnodeIsIf(pnode ptr PNode) bool
decl func pnodeIsReturn(pnode ptr PNode) bool
decl func pnodeIsWhile(pnode ptr PNode) bool

alias PBlock struct(
  node PNode,
  syms ptr Symtable
)

decl func isPBlock(node ptr PNode) bool

alias StringDef struct(
  name ptr uint8,
  begin,end Line
)

alias PDecl struct(
  node PNode,
  sym ptr PSymbol
)

decl func isPDecl(node ptr PNode) bool

alias PRoot struct(
  node PBlock,
  moduleName ptr StringDef,
  fileName ptr uint8,
  imports ptr list:List,
  aliases ptr Symtable,
  typePool ptr mem:FreePool,
  entryNode ptr PDecl
)

decl func isPRoot(node ptr PNode) bool
decl func prootHasImported(root ptr PRoot, name ptr uint8) bool

alias PExpr struct(
  node PNode,
  opType uint16,
  constant bool,
  type,sizeType ptr Type
)

decl func isPExpr(node ptr PNode) bool

decl mut emptyExpr PExpr


decl func findPBlock(node ptr PNode) ptr PNode
decl func findSym(node ptr PNode, name ptr uint8) ptr Type
decl func findSymLocal(node ptr PNode, name ptr uint8) ptr Type
decl func findStab(node ptr PNode) ptr Symtable


decl mut PROOT      uint16
decl mut PENTRY     uint16
decl mut PEXPR      uint16
decl mut PFUNCTION  uint16
decl mut PALIAS     uint16
decl mut PDECL      uint16
decl mut PMUT       uint16
decl mut PBREAK     uint16
decl mut PCONTINUE  uint16
decl mut PRETURN    uint16
decl mut PIF        uint16
decl mut PIFELSE    uint16
decl mut PWHILE     uint16
decl mut PBLOCK     uint16

#end pnode

# symbols

decl mut PTYPE_FUNC   uint16
decl mut PTYPE_ID     uint16
decl mut PTYPE_PTR    uint16
decl mut PTYPE_STRUCT uint16
decl mut PTYPE_LOC    uint16


decl mut TYPE_EMPTY     uint16
decl mut TYPE_FUNC      uint16
decl mut TYPE_PTR       uint16
decl mut TYPE_STRUCT    uint16
decl mut TYPE_LOC       uint16
decl mut TYPE_BOOL      uint16
decl mut TYPE_INT       uint16
decl mut TYPE_DATA      uint16
decl mut TYPE_RECALIAS uint16
decl mut TYPE_NULL      uint16
