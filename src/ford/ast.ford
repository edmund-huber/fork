#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module ast


import cs
import hash
import kv
import list
import map
import mem
import vect


alias Line struct(
  line, pos uintptr
)


# PType and PTypeDescr do not represent a type, but its parse-time representation.
# Per example, uint16 and PType are bot "id-types", because they are syntactically presented by
# an identifier at parsing time, while being really very different (a struct and an integer).

alias PType struct (
  refc mem:Ref,
  name, moduleName ptr uint8,
  descr ptr PTypeDescr,
  begin, end Line
)

decl method PType.dump()


alias PTypeDescr struct (
  refc mem:Ref,
  type uint16,
  # if type is PTYPE_PTR or PTYPE_LOC, this is the type returned by dereferencing.
  # if type is PTYPE_FUNC, this is the return type of the function
  retType ptr PType,
  # if type is PTYPE_FUNC, this is the arguments list
  # if type is PTYPE_STRUCT, this is the fields list
  arguments ptr list:List,
  #if type is PTYPE_LOC, this is the number of items allocated
  length uintptr
)

decl method PTypeDescr.dump()


alias PSymbol struct(
  refc mem:Ref,
  name ptr uint8,
  type ptr PType
)


# Type represents a well formed, semantically valid type.
# An instance of this is the product of type validation by sema.

alias Type struct(
  # which type macroclass this instance represents.
  type uint16,

  # eventual alias (module and name) of the current type.
  moduleName, name ptr uint8,

  # if integer, this represent its signedness.
  isSigned bool,

  # size of this type. Set on creation. -1 if recursive.
  # functions have no size.
  # alignment of this type. Set on creation. -1 if recursive.
  typeSize, typeAlign intptr,

  # number of items, in case this is a location.
  itemCount uintptr,

  # the type the current instance evaluates to when an operation like function invocation or derefereciation is made.
  # For pointers, this is the type of the expression obtained with val.
  # For functions, this is the value of the expression obtained invoking the function.
  retType ptr Type,

  # The members that compose this type.
  # For functions, these are the parameters.
  # For structures, these are the members.
  members ptr kv:KVList,

  # if this type is builtin
  builtin bool,

  # where the original type was defined.
  begin, end Line
)


decl func typeFree(type ptr Type)


decl method Type.dump(cs ptr cs:Charstash)
decl method Type.equals(other ptr Type) bool
decl method Type.isBool() bool
decl method Type.isData() bool
decl method Type.isEmpty() bool
decl method Type.isFunc() bool
decl method Type.isInt() bool
decl method Type.isLoc() bool
decl method Type.isNull() bool
decl method Type.isPtr() bool
decl method Type.isStruct() bool
decl method Type.summarize(cs ptr cs:Charstash)


alias Symbol struct(
  name ptr uint8,
  type ptr Type
)


decl method Symbol.dump(cs ptr cs:Charstash)
decl method Symbol.equals(other ptr Symbol) bool
decl method Symbol.summarize(cs ptr cs:Charstash)



alias DeclInfo struct(
  declType uint16,
  declOnly,funcParam bool,
  type ptr Type
)

alias MethodInfo struct(
  typeModule,typeName,name ptr uint8,
  type ptr Type
)

decl func methodInfoHash(mi ptr MethodInfo) uintptr


alias Symtable struct(
  syms ptr kv:KVList
)

decl func stabFree(stab ptr Symtable)
decl func stabNew() ptr Symtable


decl method Symtable.add(name ptr uint8,
                         isDecl,funcParam bool,
                         type ptr Type,
                         symType uint16)

decl method Symtable.get(name ptr uint8) ptr DeclInfo
decl method Symtable.typeof(name ptr uint8) ptr Type


decl func declDump(prefix,name ptr uint8, type ptr Type)
# end symbols

# begin pnode

alias PNode struct(
  type uint16,
  value uintptr,
  parent ptr PNode,
  leaves ptr list:List,
  begin, end Line,
  validated bool
)

decl func pnodeFree(pnode ptr PNode)

# pnode methods
decl method PNode.dump()

decl method PNode.findPBlock() ptr PNode
decl method PNode.findPRoot() ptr PRoot
decl method PNode.findStab() ptr Symtable
decl method PNode.findSym(name ptr uint8) ptr Type
decl method PNode.findSymLocal(name ptr uint8) ptr Type

decl method PNode.isBlock() bool
decl method PNode.isBreakContinue() bool
decl method PNode.isDecl() bool
decl method PNode.isMulDecl() bool
decl method PNode.isMutOrDecl() bool
decl method PNode.isExpr() bool
decl method PNode.isIf() bool
decl method PNode.isReturn() bool
decl method PNode.isRoot() bool
decl method PNode.isWhile() bool


alias PBlock struct(
  node PNode,
  syms ptr Symtable
)


alias StringDef struct(
  name ptr uint8,
  begin,end Line
)


alias PDecl struct(
  node PNode,
  sym ptr PSymbol,
  isDecl bool,
  methodTypeModule,methodType ptr uint8
)


alias PMulDecl struct(
  node PNode,
  syms ptr list:List
)


alias PRoot struct(
  node PBlock,
  moduleName ptr StringDef,
  fileName ptr uint8,
  imports ptr list:List,
  aliases ptr Symtable,
  typePool ptr mem:FreePool,
  entryNode ptr PDecl,
  pmodule ptr PModule
)

decl method PRoot.hasImported(name ptr uint8) bool

alias PExpr struct(
  node PNode,
  opType uint16,
  constant bool,
  type,sizeType ptr Type
)


alias PModule struct(
  name ptr uint8,
  roots ptr vect:Vect
)


decl method PModule.dump()

decl func pmoduleFree(pmod ptr PModule)


decl func declKey(pdecl ptr PDecl) ptr uint8
decl func methodKey(typeModule,typeName,methodName ptr uint8) ptr uint8


decl mut PROOT      uint16
decl mut PENTRY     uint16
decl mut PEXPR      uint16
decl mut PFUNCTION  uint16
decl mut PALIAS     uint16
decl mut PMUT       uint16
decl mut PMUTEXP    uint16
decl mut PBREAK     uint16
decl mut PCONTINUE  uint16
decl mut PRETURN    uint16
decl mut PIF        uint16
decl mut PIFELSE    uint16
decl mut PWHILE     uint16
decl mut PBLOCK     uint16
decl mut PMETHOD    uint16

#end pnode

# symbols

decl mut PTYPE_FUNC   uint16
decl mut PTYPE_ID     uint16
decl mut PTYPE_PTR    uint16
decl mut PTYPE_STRUCT uint16
decl mut PTYPE_LOC    uint16


decl mut TYPE_EMPTY     uint16
decl mut TYPE_FUNC      uint16
decl mut TYPE_PTR       uint16
decl mut TYPE_STRUCT    uint16
decl mut TYPE_LOC       uint16
decl mut TYPE_BOOL      uint16
decl mut TYPE_INT       uint16
decl mut TYPE_DATA      uint16
decl mut TYPE_RECALIAS uint16
decl mut TYPE_NULL      uint16
