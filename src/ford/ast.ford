#  Second Step - Experimental Fork Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.

module ast

import lex
import spring
import utils

# symbols

decl TYPE_FUNC   uint16
decl TYPE_ID     uint16
decl TYPE_PTR    uint16
decl TYPE_LOC    uint16
decl TYPE_STRUCT uint16

alias Type struct (
  refc utils:Ref,
  name, moduleName ptr uint8,
  # anonymous because of first-step parser limitations; actually a TypeDescr
  descr data,
  begin, end utils:Line
)

alias TypeDescr struct (
  refc utils:Ref,
  type uint16,
  # if type is TYPE_PTR or TYPE_LOC, this is the type returned by dereferencing.
  # if type is TYPE_FUNC, this is the return type of the function
  retType ptr Type,
  # if type is TYPE_FUNC, this is the arguments list
  # if type is TYPE_STRUCT, this is the fields list
  arguments ptr spring:List,
  #if type is TYPE_LOC, this is the number of items allocated
  length uintptr
)

decl typeDump func(type ptr Type)
decl typeNew func(name,moduleName ptr uint8, descr ptr TypeDescr) ptr Type

decl typeDescrDump func(type ptr TypeDescr)
decl typeDescrNew func(type uint16, retType ptr Type, params ptr spring:List) ptr TypeDescr
decl typeDescrNewLoc func(innerType ptr Type, length uintptr) ptr TypeDescr

alias Symbol struct(
  refc utils:Ref,
  name ptr uint8,
  type ptr Type
)

decl symbolNew func(name ptr uint8, type ptr Type) ptr Symbol

alias Alias Symbol

decl aliasFree ptr func(item ptr Alias)
decl aliasNew ptr func(name ptr uint8, type ptr Type) ptr Alias

alias Symtable struct(
  syms ptr spring:List
)

decl stabNew func() ptr Symtable
decl stabAdd func(stab ptr Symtable, sym ptr Symbol)
decl stabTypeof func(stab ptr Symtable, name ptr uint8) ptr Type
decl stabFree func(stab ptr Symtable)
# end symbols

# begin pnode

alias PNode struct(
  type uint16,
  value uintptr,
  parent ptr PNode,
  leaves ptr spring:Vector,
  begin, end utils:Line
)

decl pnodeAppendChild func(parent ptr PNode, child ptr PNode) ptr PNode
decl pnodeDump func(node ptr PNode)
decl pnodeFree func(pnode ptr PNode)
decl pnodeNew func(ptype uint16, value uintptr) ptr PNode

alias PBlock struct(
  node PNode,
  syms ptr Symtable
)

decl isPBlock func(node ptr PNode) bool
decl pblockNew func() ptr PBlock

alias StringDef struct(
  name ptr uint8,
  begin,end utils:Line
)

decl strdefFree func(strdef ptr StringDef)
decl strdefNew func(name ptr uint8, begin,end utils:Line) ptr StringDef

alias PRoot struct(
  node PBlock,
  moduleName ptr StringDef,
  fileName ptr uint8,
  imports ptr spring:Vector
)

decl isPRoot func(node ptr PNode) bool
decl prootNew func(modName ptr StringDef, imports ptr spring:Vector, fileName ptr uint8) ptr PRoot

alias PDecl struct(
  node PNode,
  sym ptr Symbol
)

decl isPDecl func(node ptr PNode) bool
decl pdeclNew func(ptype uint16, sym ptr Symbol) ptr PDecl

alias PExpr struct(
  node PNode,
  opType uint16,
  type ptr Type
)

decl pexprNew func(tok ptr lex:Token, lhs,rhs ptr PExpr, begin,end utils:Line) ptr PExpr
decl pexprNewSingle func(tok ptr lex:Token) ptr PExpr
decl isPExpr func(node ptr PNode) bool

decl emptyExpr PExpr

decl PROOT   uint16
decl PENTRY     uint16
decl PEXPR      uint16
decl PFUNCTION  uint16
decl PALIAS     uint16
decl PDECL      uint16
decl PMUT       uint16
decl PBREAK     uint16
decl PCONTINUE  uint16
decl PRETURN    uint16
decl PIF        uint16
decl PIFELSE    uint16
decl PWHILE     uint16
decl PBLOCK     uint16

#end pnode
