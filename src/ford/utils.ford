#  Second Step - Experimental Fork Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.

module utils

import spring

decl charCanBeInString func(ch uint8, escape bool) bool
decl charIsIdVal func(ch uint8) bool
decl charIsPar func(ch uint8) bool
decl charIsSym func(ch uint8) bool
decl charIsWhite func(ch uint8) bool


alias Line struct(
  line, pos uintptr
)

alias Issue struct (
  gravity uint8,
  where Line,
  filename,message ptr uint8
)


decl issueFree func(issue ptr Issue)
decl issueNew func(gravity uint8, where Line, filename, message ptr uint8) ptr Issue
decl issueWriteOut func(issue ptr Issue, out ptr func(err ptr uint8))
decl issueToError func(issue ptr Issue) ptr spring:Error


decl strIsUInt func(str ptr uint8) bool

alias Ref struct (
  count uintptr,
  freeFunc ptr func(item data)
)

decl incRef func(item data)
decl decRef func(item data)

alias Tokenizer struct (
  str ptr uint8,
  strlen uintptr,
  begin intptr,
  splitChar uint8
)

decl tokenizerFree func(tkz ptr Tokenizer)
decl tokenizerNew func(str ptr uint8, ch uint8) ptr Tokenizer
decl tokenizerNext func(tkz ptr Tokenizer) ptr uint8


alias FreePool struct(
  ptrs ptr spring:List,
  freeFunc ptr func(item data)
)


decl fpAlloc func(fp ptr FreePool, len uintptr) data
decl fpFree func(fp ptr FreePool)
decl fpNew func(freeFunc ptr func(item data)) ptr FreePool
decl fpZAlloc func(fp ptr FreePool, len uintptr) data


decl ISSUE_ERR uint8
decl ISSUE_WARN uint8
decl ISSUE_INFO uint8
