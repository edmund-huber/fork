#  Second Step - Experimental Fork Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.

module sema

import ast
import ctx
import spring
import utils

alias ValidationResult struct(
    retry bool,
    type ptr ast:Type
)

# type validation

decl validateAlias func(ctx ptr ctx:Context, root ptr ast:PRoot, ptype ptr ast:PType, errors,recursive ptr spring:List) ValidationResult

# validates the AST, and returns a listor of the issues found.
decl semaValidateAst func(context ptr ctx:Context, root ptr ast:PNode) ptr spring:List
decl semaParse func(context ptr ctx:Context, fileName ptr uint8, newRoot ptr ptr ast:PNode) ptr spring:List

# ast sema operations

decl findAliasImport func(ctx ptr ctx:Context, moduleName,name ptr uint8) ptr ast:Type
decl findAliasLocal func(node ptr ast:PNode, name ptr uint8) ptr ast:Type

decl findSym func(node ptr ast:PNode, name ptr uint8) ptr ast:Type
decl findSymLocal func(node ptr ast:PNode, name ptr uint8) ptr ast:Type
decl findStab func(node ptr ast:PNode) ptr ast:Symtable
