#  ctrans, Fork to C transpiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module ctrans


import ast
import cs
import err
import io
import list


alias Transl struct(
  includes,typedefs,externs,vars,funcs ptr cs:Charstash,
  modName ptr uint8,
  header,debug bool,
  cnt uintptr
)


decl func init(tr ptr Transl, header bool, name ptr uint8)


decl method Transl.dump(stream ptr io:Stream) ptr err:Error
decl method Transl.extern(sym ptr uint8)
decl method Transl.forkmain(root ptr ast:PRoot)
decl method Transl.function(root ptr ast:PRoot, fname,sym ptr uint8, fn ptr ast:PDecl)
decl method Transl.globVar(sym ptr uint8, root ptr ast:PRoot, expr ptr ast:PExpr)
decl method Transl.includeFord(fordName ptr uint8)
decl method Transl.translate(root ptr ast:PRoot)
decl method Transl.typedef(name ptr uint8, type ptr ast:Type)


alias Block struct(
  decls,vars,stmts ptr list:List,
  cnt ptr uintptr
)

decl func blNew(cnt ptr uintptr) Block

decl method Block.declaration(root ptr ast:PRoot,
                              block ptr ast:PBlock,
                              stmt ptr ast:PNode)

decl method ctrans:Block.dumpInCs(cs ptr cs:Charstash,
                                  fname ptr uint8,
                                  p uintptr)

decl method Block.statement(root ptr ast:PRoot,
                            block ptr ast:PBlock,
                            stmt ptr ast:PNode,
                            fname ptr uint8,
                            p uintptr)


decl func translBlock(cs ptr cs:Charstash,
                      cnt ptr uintptr,
                      root ptr ast:PRoot,
                      block ptr ast:PBlock,
                      fname ptr uint8,
                      p uintptr)

decl func translExpr(cs ptr cs:Charstash, root ptr ast:PRoot, pexpr ptr ast:PExpr)
decl func translSym(moduleName ptr uint8, pdecl ptr ast:PDecl, dinfo ptr ast:DeclInfo) ptr uint8


# symbol functions

decl func symMod(modName,name ptr uint8) ptr uint8


# Charstash extension methods

decl method cs:Charstash.addCStr(str ptr uint8)
decl method cs:Charstash.addDebugLine(fname ptr uint8, line,p uintptr)
decl method cs:Charstash.addMethSym(typeName,name ptr uint8)
decl method cs:Charstash.addPad(p uintptr)
decl method cs:Charstash.addSymName(modName,name ptr uint8)
decl method cs:Charstash.genCsym(typeName,moduleName,name ptr uint8,
                                 type ptr ast:Type,
                                 tdf bool)
decl method cs:Charstash.wrapType(type ptr ast:Type)

alias LineStr struct(
  line ast:Line,
  str ptr uint8
)

decl func lsFree(ls ptr LineStr)
decl func lsNew(line ast:Line, str ptr uint8) ptr LineStr
