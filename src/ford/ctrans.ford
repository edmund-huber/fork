#  ctrans, Fork to C transpiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module ctrans


import ast
import cs
import err
import io
import list


alias Transl struct(
  includes,typedefs,externs,vars,funcs ptr cs:Charstash,
  modName ptr uint8,
  header,debug bool,
  cnt uintptr
)


decl func init(tr ptr Transl, header bool, name ptr uint8)


decl method Transl.dump(stream ptr io:Stream) ptr err:Error
decl method Transl.extern(sym ptr uint8)
decl method Transl.forkmain(root ptr ast:PRoot)

decl method Transl.function(root ptr ast:PRoot,
                            fname,sym ptr uint8,
                            type ptr ast:Type,
                            fn ptr ast:PDecl)

decl method Transl.genCsym(cs ptr cs:Charstash,
                           typeName,moduleName,name ptr uint8,
                           type ptr ast:Type,
                           pad intptr,
                           tdf bool)

decl method Transl.globExpr(root ptr ast:PRoot, pexpr ptr ast:PExpr)
decl method Transl.globVar(sym ptr uint8, root ptr ast:PRoot, expr ptr ast:PExpr)
decl method Transl.includeFord(fordName ptr uint8)
decl method Transl.translate(root ptr ast:PRoot)

decl method Transl.translSym(moduleName ptr uint8,
                             pdecl ptr ast:PDecl,
                             dinfo ptr ast:DeclInfo) ptr uint8

decl method Transl.typedef(name ptr uint8, type ptr ast:Type, ssa bool)
decl method Transl.wrapType(cs ptr cs:Charstash,
                            type ptr ast:Type,
                            pad intptr)


alias Block struct(
  decls,vars,stmts ptr cs:Charstash,
  unit ptr Transl,
  pad uintptr,
  rvoType ptr ast:Type
)


decl func blNew(unit ptr Transl, pad uintptr, rvoType ptr ast:Type) Block

decl method Block.assign(to,from Elem, fname ptr uint8, line uintptr)
decl method Block.declaration(root ptr ast:PRoot,
                              fname ptr uint8,
                              block ptr ast:PBlock,
                              stmt ptr ast:PNode)

decl method Block.decPad()
decl method Block.dumpInCs(cs ptr cs:Charstash)

decl method Block.expr(root ptr ast:PRoot,
                              pexpr ptr ast:PExpr,
                              fname ptr uint8,
                              line uintptr) Elem

decl method Block.incPad()
decl method Block.padDecls()
decl method Block.padStmts()
decl method Block.padVars()

decl method Block.statement(root ptr ast:PRoot,
                            block ptr ast:PBlock,
                            stmt ptr ast:PNode,
                            fname ptr uint8)


decl func translBlock(cs ptr cs:Charstash,
                      unit ptr Transl,
                      root ptr ast:PRoot,
                      block ptr ast:PBlock,
                      rvoType ptr ast:Type,
                      fname ptr uint8,
                      p uintptr)


# symbol functions

decl func symMod(modName,name ptr uint8) ptr uint8


# Charstash extension methods

decl method cs:Charstash.addCStr(str ptr uint8)
decl method cs:Charstash.addDebugLine(fname ptr uint8, line uintptr)
decl method cs:Charstash.addMethSym(typeName,name ptr uint8)
decl method cs:Charstash.addPad(p uintptr)
decl method cs:Charstash.addSymName(modName,name ptr uint8)

alias LineStr struct(
  line ast:Line,
  str ptr uint8
)

decl func lsFree(ls ptr LineStr)
decl func lsNew(line ast:Line, str ptr uint8) ptr LineStr


alias Elem struct(
  str ptr uint8,
  type ptr ast:Type
)


decl method Elem.value() ptr uint8
decl method Elem.type() ptr ast:Type
decl method Elem.wipe()


decl func deref(elem Elem, ptrType ptr ast:Type) Elem


# operator functions
decl func isBinOp(tok uint16) bool
decl func opConv(tok uint16) ptr uint8


decl mut RELEASE uint64

decl mut VER_MAJ uint8
decl mut VER_MIN uint8
decl mut VER_PATCH uint8
decl mut VERSION ptr uint8
