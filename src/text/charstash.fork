#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014, 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


import base
import mem
import text


func csAppend(cs ptr text:Charstash, ch uint8)
  if cs'len == cs'cap
    cs'cap = cs'cap + 10
    mut new = cast<ptr uint8>(mem:alloc(cs'cap))
    mem:memmove(new, cs'base, cs'len)
    mem:free(cs'base)
    cs'base = new
    cs'work = cs'base + cs'len
  /if

  val cs'work = ch
  cs'len++
  cs'work++
/func


func csAppendInt(cs ptr text:Charstash, num uintptr)
  mut buf [20] int8

  text:numtostr(num, ptr buf[0], 20)

  text:csAppendStr(cs, buf)
/func


func csAppendStr(cs ptr text:Charstash, str ptr uint8)
  while val str != 0
    csAppend(cs, val str)
    str++
  /while
/func


func csFree(cs ptr text:Charstash)
  mem:free(cs'base)
  mem:free(cs)
/func


func csNew(cap uintptr) ptr text:Charstash
  mut cs = cast<ptr text:Charstash>(mem:zalloc(size(text:Charstash)))

  cs'work = cs'base = cast<ptr uint8>(mem:alloc(cap))
  cs'cap = cap

  return cs
/func


func csUnwrap(cs ptr text:Charstash) ptr uint8
  csAppend(cs, 0)

  mut ret = cs'base
  mem:free(cs)

  return ret
/func


func csLen(cs ptr text:Charstash) uintptr
  return cs'len
/func
