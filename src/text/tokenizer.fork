#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


import base
import mem
import text


func tokenizerFree(tkz ptr text:Tokenizer)
  if tkz != null
    mem:free(tkz'str)
    mem:free(tkz)
  /if
/func


func tokenizerNew(str ptr uint8, ch uint8) ptr text:Tokenizer
  mut tkz = cast<ptr text:Tokenizer>(mem:zalloc(size(text:Tokenizer)))
  tkz'str = text:strclone(str)
  tkz'strlen = text:strlen(str)
  tkz'splitChar = ch

  return tkz
/func


func tokenizerNext(tkz ptr text:Tokenizer) ptr uint8
  if tkz'begin == tkz'strlen
    return null
  /if

  mut initialBegin = tkz'begin

  while tkz'str[tkz'begin] != tkz'splitChar and tkz'begin < tkz'strlen
    tkz'begin++
  /while

  mut nextLen = tkz'begin - initialBegin
  mut ret = cast<ptr uint8>(mem:zalloc(nextLen + 1)) # + 1 is for the null end. God I hate C

  text:strncpy(ret, tkz'str + initialBegin, nextLen)

  if tkz'str[tkz'begin] == tkz'splitChar
    tkz'begin++
  /if

  return ret
/func
