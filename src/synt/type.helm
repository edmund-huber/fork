#  Second Step - Experimental Helm Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the 
#  licenses expressed under Section 1.12 of the MPL v2. 

import spring
import synt
import utils

func typeFree(type ptr synt:Type)
  if type != null
    if type'descr != null
      utils:decRef(type'descr)
    /if

    if type'moduleName != null
      spring:free(type'moduleName)
    /if

    if type'name != null
      spring:free(type'name)
    /if

    spring:free(type)
  /if
/func

func typeNew(name, moduleName ptr uint8, descr ptr synt:TypeDescr) ptr synt:Type
  mut type = cast<ptr synt:Type>(spring:zalloc(size(synt:Type)))

  type'refc'freeFunc = ptr synt:typeFree

  type'name = name
  type'moduleName = moduleName
  utils:incRef(descr)
  type'descr = descr

  return type
/func

func typeDescrFree(descr ptr synt:TypeDescr)
  if descr != null
    if descr'retType != null
      utils:decRef(descr'retType)
    /if

    if descr'arguments != null
      spring:listFreeAll(descr'arguments, ptr synt:symbolFree)
    /if
  /if
/func

func typeDescrNew(type uint16, retType ptr synt:Type, params ptr spring:List) ptr synt:TypeDescr
  mut descr = cast<ptr synt:TypeDescr>(spring:zalloc(size(synt:TypeDescr)))

  descr'refc'freeFunc = ptr synt:typeDescrFree

  utils:incRef(retType)
  descr'type = type
  descr'retType = retType
  descr'arguments = params

  return descr
/func

func symbolFree(sym ptr synt:Symbol)
  if sym != null
    spring:free(sym'name)
    synt:typeFree(sym'type)
    spring:free(sym)
  /if
/func

func symbolNew(name ptr uint8, type ptr synt:Type) ptr synt:Symbol
  mut sym = cast<ptr synt:Symbol>(spring:zalloc(size(synt:Symbol)))

  sym'name = name
  sym'type = type

  return sym
/func

mut aliasFree = cast<ptr func(ptr synt:Alias)>(symbolFree)
mut aliasNew  = cast<ptr func(ptr uint8, ptr synt:Type) ptr synt:Alias>(symbolNew)

mut TYPE_FUNC   uint16 = 10
mut TYPE_NUM    uint16 = 20
mut TYPE_PTR    uint16 = 30
mut TYPE_STRUCT uint16 = 40
