#  Second Step - Experimental Fork Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.

import lex
import spring
import syms
import synt
import utils

mut TYPE_BINARY uint8 = 0
mut TYPE_UNARY uint8 = 2

mut ASSOC_LEFT uint8 = 0
mut ASSOC_RIGHT uint8 = 1

mut emptyExpr synt:PExpr


func isBinary(tok ptr lex:Token) bool
  return tok != null and (tok'type mod 10) < 2
/func


func isUnary(tok ptr lex:Token) bool
  return tok != null and !isBinary(tok)
/func


func assocRight(tok ptr lex:Token) bool
  return tok != null and ((tok'type & 1) != 0)
/func


func assocLeft(tok ptr lex:Token) bool
  return tok != null and !assocRight(tok)
/func


func tokTypePrec(ttype uint16) int16
  if ttype == lex:MINUS
    return tokTypePrec(lex:PLUS)
  /if

  return ttype / 1000
/func


func opPrec(tok ptr lex:Token) int16
  if tok != null
    return tokTypePrec(tok'type)
  /if

  return 0
/func


func isOp(tok ptr lex:Token) bool
  return opPrec(tok) != 0
/func


func isValidInExpr(tok ptr lex:Token) bool
  return tok != null and (isOp(tok) or tok'type == lex:ID or tok'type == lex:NUMBER)
/func


func pexprNew(tok ptr lex:Token, lhs,rhs ptr synt:PExpr, begin,end utils:Line) ptr synt:PExpr

  mut pexpr = cast<ptr synt:PExpr>(spring:zalloc(size(synt:PExpr)))
  pexpr'node'type = synt:PEXPR
  pexpr'node'value = tok'value
  pexpr'node'leaves = spring:vectNew(2)
  pexpr'opType = tok'type
  tok'value = 0 # now the value belongs to this PExpr

  mut pnode = ptr pexpr'node
  pnode'begin = begin
  pnode'end = end

  synt:pnodeAppendChild(pnode, ptr lhs'node)
  synt:pnodeAppendChild(pnode, ptr rhs'node)

  lex:tokenFree(tok)

  return pexpr

/func


func pexprNewSingle(tok ptr lex:Token) ptr synt:PExpr
  return pexprNew(tok, null, null, synt:tokExtractBegin(tok), synt:tokExtractEnd(tok))
/func


func parserParseCastTag(ctx ptr synt:ParserContext) ptr synt:PExpr

  mut castTok = synt:nextTok(ctx)

  if !synt:expectDiscard(ctx, lex:MINOR)
    lex:tokenFree(castTok)
    return null
  /if

  mut type = synt:parserParseType(ctx)
  if type == null
    lex:tokenFree(castTok)
    return null
  /if

  if !synt:expectDiscard(ctx, lex:MAJOR) or !synt:expectDiscard(ctx, lex:OPAR)
    lex:tokenFree(castTok)
    utils:decRef(type)
    return null
  /if

  decl parserParseExpr func(ctx ptr synt:ParserContext) ptr synt:PExpr

  mut expr = parserParseExpr(ctx)
  if expr == null
    lex:tokenFree(castTok)
    utils:decRef(type)
  /if

  mut cpar = synt:expect(ctx, lex:CPAR)
  if cpar == null
    lex:tokenFree(castTok)
    utils:decRef(type)
    return null
  /if

  mut pexpr = pexprNew(castTok, expr, null, synt:tokExtractBegin(castTok), synt:tokDiscardEnd(cpar))
  pexpr'type = type

  return pexpr
/func


func parserParseSizeOp(ctx ptr synt:ParserContext) ptr synt:PExpr

  mut sizeTok = synt:nextTok(ctx)


  if !synt:expectDiscard(ctx, lex:OPAR)
    lex:tokenFree(sizeTok)
    return null
  /if

  mut type = synt:parserParseType(ctx)
  if type == null
    lex:tokenFree(sizeTok)
    return null
  /if

  mut cpar = synt:expect(ctx, lex:CPAR)
  if cpar == null
    lex:tokenFree(sizeTok)
    return null
  /if

  mut sizeop = pexprNew(sizeTok, null, null, synt:tokExtractBegin(sizeTok), synt:tokDiscardEnd(cpar))
  sizeop'type = type

  return sizeop
/func


func tokIsPostfixExpressionSuffixStart(tok ptr lex:Token) bool
  return tok != null and (tok'type == lex:OPAR or tok'type == lex:OBRAC or tok'type == lex:INC or tok'type == lex:DEC)
/func


func parserParseId(ctx ptr synt:ParserContext) ptr synt:PExpr
  mut first = synt:nextTok(ctx)
  mut ret = pexprNewSingle(first)

  if ctx'next != null and ctx'next'type == lex:COLON
    mut colon = synt:nextTok(ctx)

    mut id = synt:expect(ctx, lex:ID)
    if id == null
      lex:tokenFree(colon)
      synt:pnodeFree(cast<ptr synt:PNode>(ret))
      return null
    /if

    mut idExpr = pexprNewSingle(id)
    ret = pexprNew(colon, ret, idExpr, ret'node'begin, idExpr'node'end)
  /if

  return ret

/func


func parserParseGenParens(ctx ptr synt:ParserContext, cpar uint16) ptr synt:PExpr

  decl parserParseAssignExpr func(ctx ptr synt:ParserContext) ptr synt:PExpr

  mut expression = parserParseAssignExpr(ctx)

  if expression == null
    return null
  /if

  mut cparTok = synt:expect(ctx, cpar)
  if cparTok == null
    synt:pnodeFree(cast<ptr synt:PNode>(expression))
    return null
  /if

  lex:tokenFree(cparTok)

  return expression

/func


func parserParseParens(ctx ptr synt:ParserContext) ptr synt:PExpr

  synt:discardTok(ctx)
  return parserParseGenParens(ctx, lex:CPAR)

/func


func parserParsePrimaryExpr(ctx ptr synt:ParserContext) ptr synt:PExpr

  if ctx'next == null
    ctx'prs'err = utils:error(ctx'last, "expected a primary expression, got an EOF")
    return null
  /if

  if ctx'next'type == lex:FALSE or ctx'next'type == lex:TRUE or ctx'next'type == lex:STRING or ctx'next'type == lex:NUMBER
    return pexprNewSingle(synt:nextTok(ctx))
  /if

  if ctx'next'type == lex:ID
    return parserParseId(ctx)
  /if

  if ctx'next'type != lex:OPAR
    ctx'prs'err = utils:errorMism(ctx'next'lineno, "an identifier, a costant or an expression between ()", lex:tokenStr(ctx'next))
    return null
  /if

  return parserParseParens(ctx)

/func


func parserParseAccessExpr(ctx ptr synt:ParserContext, lhs ptr synt:PExpr) ptr synt:PExpr

  mut obrac = synt:nextTok(ctx)
  mut expression = parserParseGenParens(ctx, lex:CBRAC)

  if expression == null
      return null
  /if

  return pexprNew(obrac, lhs, expression, lhs'node'begin, expression'node'end)

/func


func parserParseCallExpr(ctx ptr synt:ParserContext, lhs ptr synt:PExpr) ptr synt:PExpr

  mut opar = synt:nextTok(ctx)
  mut begin = synt:tokExtractBegin(opar)
  mut callExpr = pexprNew(opar, lhs, null, begin, begin)
  mut callPNode = cast<ptr synt:PNode>(callExpr)

  decl parserParseAssignExpr func(ctx ptr synt:ParserContext) ptr synt:PExpr

  mut next = ctx'next
  mut first = true


  while ctx'next != null and ctx'next'type != lex:CPAR

    if ctx'next'type != lex:COMMA and !first

      ctx'prs'err = utils:errorMism(ctx'last, "a comma ','", lex:tokenStr(ctx'next))
      synt:pnodeFree(callPNode)
      return null

    else

    #if it's not the first argument than it is COMMA
      if !first
        synt:discardTok(ctx)
      else
        first = false
      /if

    /if

    mut arg = parserParseAssignExpr(ctx)
    if arg == null
      synt:pnodeFree(callPNode)
      return null
    /if

    synt:pnodeAppendChild(callPNode, cast<ptr synt:PNode>(arg))

  /while

  mut cpar = synt:expect(ctx, lex:CPAR)
  if cpar == null
    synt:pnodeFree(callPNode)
    return null
  /if

  callExpr'node'end = synt:tokDiscardEnd(cpar)

  return callExpr

/func


func parserParseFieldExpr(ctx ptr synt:ParserContext, lhs ptr synt:PExpr) ptr synt:PExpr

  mut apos = synt:nextTok(ctx)
  mut id = synt:expect(ctx, lex:ID)

  if id == null
    lex:tokenFree(apos)
    return null
  /if

  mut idExpr = pexprNewSingle(id)

  return pexprNew(apos, lhs, idExpr, lhs'node'begin, idExpr'node'end)
/func


func parserParsePostfixSuffix(ctx ptr synt:ParserContext, primaryLhs ptr synt:PExpr) ptr synt:PExpr

  mut lhs = primaryLhs

  while true
    if ctx'next == null
      break
    /if

    if ctx'next'type == lex:OBRAC
      lhs = parserParseAccessExpr(ctx, lhs)
    else
      if ctx'next'type == lex:OPAR
        lhs = parserParseCallExpr(ctx, lhs)
      else
        if ctx'next'type == lex:INC or ctx'next'type == lex:DEC
          mut incDec = synt:nextTok(ctx)
          lhs = pexprNew(incDec, lhs, null, lhs'node'begin, synt:tokExtractEnd(incDec))
        else
          if ctx'next'type == lex:APOS
            lhs = parserParseFieldExpr(ctx, lhs)
          else
            break
          /if
        /if
      /if
    /if

    if lhs == null
      return null
    /if
  /while

  return lhs
/func


func parserParsePostfixExpr(ctx ptr synt:ParserContext) ptr synt:PExpr
  mut primary = parserParsePrimaryExpr(ctx)

  if primary == null
    return null
  /if

  return parserParsePostfixSuffix(ctx, primary)
/func


func parserParseUnaryExprOp(ctx ptr synt:ParserContext) ptr synt:PExpr
  mut operator = synt:nextTok(ctx)

  decl parserParseCastExpr func(ctx ptr synt:ParserContext) ptr synt:PExpr

  mut result = parserParseCastExpr(ctx)
  if result == null
    lex:tokenFree(operator)
    return null
  /if

  return pexprNew(operator, result, null, synt:tokExtractBegin(operator), result'node'end)
/func


func parserParseUnaryExpr(ctx ptr synt:ParserContext) ptr synt:PExpr
  if ctx'next'type == lex:SIZE
    return parserParseSizeOp(ctx)
  /if

  if isUnary(ctx'next)
    return parserParseUnaryExprOp(ctx)
  /if

  return parserParsePostfixExpr(ctx)
/func


func parserParseCastExpr(ctx ptr synt:ParserContext) ptr synt:PExpr
  if ctx'next == null
    ctx'prs'err = utils:error(ctx'last, "unexpected EOF")
    return null
  /if

  if ctx'next'type == lex:CAST
    return parserParseCastTag(ctx)
  /if

  return parserParseUnaryExpr(ctx)
/func


func parserParseBinaryRhs(ctx ptr synt:ParserContext, lhs ptr synt:PExpr, minPri uint16) ptr synt:PExpr
  mut curOpPrec uint16
  mut rhs ptr synt:PExpr = null
  while ctx'next != null and ((curOpPrec = opPrec(ctx'next)) >= minPri)
    mut opTok = synt:nextTok(ctx)
    rhs = parserParseCastExpr(ctx)

    if rhs == null
      return null
    /if

    mut nextOpPrec = opPrec(ctx'next)

    if ctx'next != null and (nextOpPrec > curOpPrec or (assocRight(ctx'next) and nextOpPrec == curOpPrec))
      rhs = parserParseBinaryRhs(ctx, rhs, nextOpPrec)
      if rhs == null
        return null
      /if
    /if

    lhs = pexprNew(opTok, lhs, rhs, lhs'node'begin, rhs'node'end)
  /while

  return lhs
/func


func parserParseAssignExpr(ctx ptr synt:ParserContext) ptr synt:PExpr
  mut lhs = parserParseCastExpr(ctx)

  return parserParseBinaryRhs(ctx, lhs, tokTypePrec(lex:ASSIGN))
/func


func parserParseExpr(ctx ptr synt:ParserContext) ptr synt:PExpr
  return parserParseAssignExpr(ctx)
/func
