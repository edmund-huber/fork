#  Second Step - Experimental Fork Compiler
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.

import ast
import lex
import spring
import synt
import utils

mut PTYPE_BINARY uint8 = 0
mut PTYPE_UNARY uint8 = 2

mut ASSOC_LEFT uint8 = 0
mut ASSOC_RIGHT uint8 = 1

mut emptyExpr ast:PExpr


func isBinary(tok ptr lex:Token) bool
  return tok != null and (tok'type mod 10) < 2
/func


func isUnary(tok ptr lex:Token) bool
  return tok != null and !isBinary(tok)
/func


func assocRight(tok ptr lex:Token) bool
  return tok != null and ((tok'type & 1) != 0)
/func


func assocLeft(tok ptr lex:Token) bool
  return tok != null and !assocRight(tok)
/func


func tokTypePrec(ttype uint16) int16
  if ttype == lex:MINUS
    return tokTypePrec(lex:PLUS)
  /if

  return ttype / 1000
/func


func opPrec(tok ptr lex:Token) int16
  if tok != null
    return tokTypePrec(tok'type)
  /if

  return 0
/func


func isOp(tok ptr lex:Token) bool
  return opPrec(tok) != 0
/func


func isValidInExpr(tok ptr lex:Token) bool
  return tok != null and (isOp(tok) or tok'type == lex:ID or tok'type == lex:NUMBER)
/func


func parserParseCastTag(ctx ptr synt:ParserContext) ptr ast:PExpr

  mut castTok = synt:nextTok(ctx)

  if !synt:expectDiscard(ctx, lex:MINOR)
    lex:tokenFree(castTok)
    return null
  /if

  mut type = synt:parserParseType(ctx)
  if type == null
    lex:tokenFree(castTok)
    return null
  /if

  if !synt:expectDiscard(ctx, lex:MAJOR) or !synt:expectDiscard(ctx, lex:OPAR)
    lex:tokenFree(castTok)
    utils:decRef(type)
    return null
  /if

  decl parserParseExpr func(ctx ptr synt:ParserContext) ptr ast:PExpr

  mut expr = parserParseExpr(ctx)
  if expr == null
    lex:tokenFree(castTok)
    utils:decRef(type)
  /if

  mut cpar = synt:expect(ctx, lex:CPAR)
  if cpar == null
    lex:tokenFree(castTok)
    utils:decRef(type)
    return null
  /if

  mut pexpr = ast:pexprNew(castTok, expr, null, lex:tokExtractBegin(castTok), lex:tokDiscardEnd(cpar))
  pexpr'type = type

  return pexpr
/func


func parserParseSizeOp(ctx ptr synt:ParserContext) ptr ast:PExpr

  mut sizeTok = synt:nextTok(ctx)


  if !synt:expectDiscard(ctx, lex:OPAR)
    lex:tokenFree(sizeTok)
    return null
  /if

  mut type = synt:parserParseType(ctx)
  if type == null
    lex:tokenFree(sizeTok)
    return null
  /if

  mut cpar = synt:expect(ctx, lex:CPAR)
  if cpar == null
    lex:tokenFree(sizeTok)
    return null
  /if

  mut sizeop = ast:pexprNew(sizeTok, null, null, lex:tokExtractBegin(sizeTok), lex:tokDiscardEnd(cpar))
  sizeop'type = type

  return sizeop
/func


func tokIsPostfixExpressionSuffixStart(tok ptr lex:Token) bool
  return tok != null and (tok'type == lex:OPAR or tok'type == lex:OBRAC or tok'type == lex:INC or tok'type == lex:DEC)
/func


func parserParseId(ctx ptr synt:ParserContext) ptr ast:PExpr
  mut first = synt:nextTok(ctx)
  mut ret = ast:pexprNewSingle(first)

  if ctx'next != null and ctx'next'type == lex:COLON
    mut colon = synt:nextTok(ctx)

    mut id = synt:expect(ctx, lex:ID)
    if id == null
      lex:tokenFree(colon)
      ast:pnodeFree(cast<ptr ast:PNode>(ret))
      return null
    /if

    mut idExpr = ast:pexprNewSingle(id)
    ret = ast:pexprNew(colon, ret, idExpr, ret'node'begin, idExpr'node'end)
  /if

  return ret

/func


func parserParseGenParens(ctx ptr synt:ParserContext, cpar uint16) ptr ast:PExpr

  decl parserParseAssignExpr func(ctx ptr synt:ParserContext) ptr ast:PExpr

  mut expression = parserParseAssignExpr(ctx)

  if expression == null
    return null
  /if

  mut cparTok = synt:expect(ctx, cpar)
  if cparTok == null
    ast:pnodeFree(cast<ptr ast:PNode>(expression))
    return null
  /if

  lex:tokenFree(cparTok)

  return expression

/func


func parserParseParens(ctx ptr synt:ParserContext) ptr ast:PExpr

  synt:discardTok(ctx)
  return parserParseGenParens(ctx, lex:CPAR)

/func


func parserParsePrimaryExpr(ctx ptr synt:ParserContext) ptr ast:PExpr

  if ctx'next == null
    ctx'prs'err = lex:error(ctx'last, "expected a primary expression, got an EOF")
    return null
  /if

  if ctx'next'type == lex:FALSE or ctx'next'type == lex:TRUE or ctx'next'type == lex:STRING or ctx'next'type == lex:NUMBER or ctx'next'type == lex:NULLPTR
    return ast:pexprNewSingle(synt:nextTok(ctx))
  /if

  if ctx'next'type == lex:ID
    return parserParseId(ctx)
  /if

  if ctx'next'type != lex:OPAR
    ctx'prs'err = lex:errorMism(ctx'next'lineno, "an identifier, a costant or an expression between ()", lex:tokenStr(ctx'next))
    return null
  /if

  return parserParseParens(ctx)

/func


func parserParseAccessExpr(ctx ptr synt:ParserContext, lhs ptr ast:PExpr) ptr ast:PExpr

  mut obrac = synt:nextTok(ctx)
  mut expression = parserParseGenParens(ctx, lex:CBRAC)

  if expression == null
      return null
  /if

  return ast:pexprNew(obrac, lhs, expression, lhs'node'begin, expression'node'end)

/func


func parserParseCallExpr(ctx ptr synt:ParserContext, lhs ptr ast:PExpr) ptr ast:PExpr

  mut opar = synt:nextTok(ctx)
  mut begin = lex:tokExtractBegin(opar)
  mut callExpr = ast:pexprNew(opar, lhs, null, begin, begin)
  mut callPNode = cast<ptr ast:PNode>(callExpr)

  decl parserParseAssignExpr func(ctx ptr synt:ParserContext) ptr ast:PExpr

  mut next = ctx'next
  mut first = true


  while ctx'next != null and ctx'next'type != lex:CPAR

    if ctx'next'type != lex:COMMA and !first

      ctx'prs'err = lex:errorMism(ctx'last, "a comma ','", lex:tokenStr(ctx'next))
      ast:pnodeFree(callPNode)
      return null

    else

    #if it's not the first argument than it is COMMA
      if !first
        synt:discardTok(ctx)
      else
        first = false
      /if

    /if

    mut arg = parserParseAssignExpr(ctx)
    if arg == null
      ast:pnodeFree(callPNode)
      return null
    /if

    ast:pnodeAppendChild(callPNode, cast<ptr ast:PNode>(arg))

  /while

  mut cpar = synt:expect(ctx, lex:CPAR)
  if cpar == null
    ast:pnodeFree(callPNode)
    return null
  /if

  callExpr'node'end = lex:tokDiscardEnd(cpar)

  return callExpr

/func


func parserParseFieldExpr(ctx ptr synt:ParserContext, lhs ptr ast:PExpr) ptr ast:PExpr

  mut apos = synt:nextTok(ctx)
  mut id = synt:expect(ctx, lex:ID)

  if id == null
    lex:tokenFree(apos)
    return null
  /if

  mut idExpr = ast:pexprNewSingle(id)

  return ast:pexprNew(apos, lhs, idExpr, lhs'node'begin, idExpr'node'end)
/func


func parserParsePostfixSuffix(ctx ptr synt:ParserContext, primaryLhs ptr ast:PExpr) ptr ast:PExpr

  mut lhs = primaryLhs

  while true
    if ctx'next == null
      break
    /if

    if ctx'next'type == lex:OBRAC
      lhs = parserParseAccessExpr(ctx, lhs)
    else
      if ctx'next'type == lex:OPAR
        lhs = parserParseCallExpr(ctx, lhs)
      else
        if ctx'next'type == lex:INC or ctx'next'type == lex:DEC
          mut incDec = synt:nextTok(ctx)
          lhs = ast:pexprNew(incDec, lhs, null, lhs'node'begin, lex:tokExtractEnd(incDec))
        else
          if ctx'next'type == lex:APOS
            lhs = parserParseFieldExpr(ctx, lhs)
          else
            break
          /if
        /if
      /if
    /if

    if lhs == null
      return null
    /if
  /while

  return lhs
/func


func parserParsePostfixExpr(ctx ptr synt:ParserContext) ptr ast:PExpr
  mut primary = parserParsePrimaryExpr(ctx)

  if primary == null
    return null
  /if

  return parserParsePostfixSuffix(ctx, primary)
/func


func parserParseUnaryExprOp(ctx ptr synt:ParserContext) ptr ast:PExpr
  mut operator = synt:nextTok(ctx)

  decl parserParseCastExpr func(ctx ptr synt:ParserContext) ptr ast:PExpr

  mut result = parserParseCastExpr(ctx)
  if result == null
    lex:tokenFree(operator)
    return null
  /if

  return ast:pexprNew(operator, result, null, lex:tokExtractBegin(operator), result'node'end)
/func


func parserParseUnaryExpr(ctx ptr synt:ParserContext) ptr ast:PExpr
  if ctx'next'type == lex:SIZE
    return parserParseSizeOp(ctx)
  /if

  if isUnary(ctx'next)
    return parserParseUnaryExprOp(ctx)
  /if

  return parserParsePostfixExpr(ctx)
/func


func parserParseCastExpr(ctx ptr synt:ParserContext) ptr ast:PExpr
  if ctx'next == null
    ctx'prs'err = lex:error(ctx'last, "unexpected EOF")
    return null
  /if

  if ctx'next'type == lex:CAST
    return parserParseCastTag(ctx)
  /if

  return parserParseUnaryExpr(ctx)
/func


func isConditionalOperator(tok ptr lex:Token) bool
  return tok != null and tok'type == lex:FATARROW
/func


func parserParseBinaryRhs(ctx ptr synt:ParserContext, lhs ptr ast:PExpr, minPri uint16) ptr ast:PExpr
  mut curOpPrec uint16
  mut rhs ptr ast:PExpr = null

  while ctx'next != null and ((curOpPrec = opPrec(ctx'next)) >= minPri)
    mut opTok = synt:nextTok(ctx)

    mut ternaryMiddle ptr ast:PExpr = null

    if isConditionalOperator(opTok)
      if (ternaryMiddle = synt:parserParseExpr(ctx)) == null or !synt:expectDiscard(ctx, lex:SEPARATOR)
        lex:tokenFree(opTok)
        return null
      /if
    /if

    rhs = parserParseCastExpr(ctx)

    if rhs == null
      return null
    /if

    mut nextOpPrec = opPrec(ctx'next)

    if ctx'next != null and (nextOpPrec > curOpPrec or (assocRight(ctx'next) and nextOpPrec == curOpPrec))
      rhs = parserParseBinaryRhs(ctx, rhs, nextOpPrec)
      if rhs == null
        return null
      /if
    /if

    lhs = ast:pexprTernaryNew(opTok, lhs, ternaryMiddle, rhs, lhs'node'begin, rhs'node'end)
  /while

  return lhs
/func


func parserParseAssignExpr(ctx ptr synt:ParserContext) ptr ast:PExpr
  mut lhs = parserParseCastExpr(ctx)

  return parserParseBinaryRhs(ctx, lhs, tokTypePrec(lex:ASSIGN))
/func


func parserParseExpr(ctx ptr synt:ParserContext) ptr ast:PExpr
  return parserParseAssignExpr(ctx)
/func
