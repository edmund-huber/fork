#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014, 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module hash


import hash
import list
import mem
import pair
import vect


func hashiterStart(hash ptr hash:Hash) ptr hash:HashIter
  mut iter = cast<ptr hash:HashIter>(mem:zalloc(size(hash:HashIter)))

  iter'hash = hash
  iter'curBucket = cast<ptr list:List>(val hash'buckets.get(0))

  return iter
/func


func hashiterLoadNextBucket(iter ptr hash:HashIter)
  iter'curBucket = null

  while iter'curBucket == null or iter'curBucket.len() == 0
    iter'buckIndex++

    # if we've reached the last bucket, return null and stop
    if iter'buckIndex == iter'hash'buckets.len()
      iter'end = true
      break
    /if

    iter'curBucket = cast<ptr list:List>(val iter'hash'buckets.get(iter'buckIndex))
    iter'pos = 0
  /while
/func


func hashiterNext(iter ptr hash:HashIter) ptr pair:Pair

  # load next bucket
  if iter'curBucket == null or iter'curBucket.len() == 0 or iter'pos == iter'curBucket.len()
    hashiterLoadNextBucket(iter)
  /if

  if iter'end
    return null
  /if

  mut ent = cast<ptr hash:Entry>(val iter'curBucket.get(iter'pos))
  iter'pos++

  return pair:pairNew(ent'key, ent'value)
/func


func hashiterFree(iter ptr hash:HashIter)
  mem:free(iter)
/func
