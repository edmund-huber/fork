#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015, 2016
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module parser


import ast
import buffer
import err
import fs
import hash
import io
import kv
import libfork
import mem
import pair
import parser
import set
import txt


# dumps len (32bit) and then the string into the Stream.
method buffer:Buffer.addString(str ptr uint8)
  mut len uint16 = <uint16>(str? => txt:strlen(str) || 0)

  me.add(ptr len, size(uint16))

  if len > 0
    me.add(str, len)
  /if
/method


method buffer:Buffer.addTypeList(kv ptr kv:KVList)
  # first, write a boolean, indicating if this kv is null or not.
  mut ok = kv?
  me.add(ptr ok, size(bool))

  if not ok
    return
  /if

  # then the length of the list,
  mut len = <uint32>(kv.len())

  me.add(ptr len, size(uint32))

  mut i uintptr = 0

  # then the types, one by one.
  while i < len
    mut {key,value} = val kv.getAt(i)

    me.addString(<ptr uint8>(key))

    me.addType(<ptr ast:Type>(value), false)

    i++
  /while
/method


# unalias() : an alias is an association between a string and a composite type
# or a named builtin type. It we're in the latter case AND we're aliasing,
# we don't want to dump the type name: instead, we want to dump the builtin type
# name.
method buffer:Buffer.unalias(type ptr ast:Type, aliasing bool) bool
  mut ttype = type'type

  if aliasing
    if ttype == ast:TYPE_BOOL
      me.addString("bool")

      return true
    /if

    if ttype == ast:TYPE_INT
      mut str [15] uint8
      mut cur = ptr str[0]

      if not type'isSigned
        val cur = "u"[0]
        cur++
      /if

      mem:copy(cur, "int", 3)

      cur = cur + 3

      txt:numtostr(type'typeSize * 8, cur, 10)

      me.addString(ptr str[0])

      return true
    /if

    if ttype == ast:TYPE_DATA
      me.addString("data")

      return true
    /if
  /if

  me.addString(type'name)

  return false
/method


method buffer:Buffer.addType(type ptr ast:Type, aliasing bool)
  # first, write a boolean, indicating if this type is null or not.
  mut ok = type?
  me.add(ptr ok, size(bool))

  if not ok
    return
  /if

  # then write the type of this type (uint16)

  me.add(ptr type'type, size(uint16))

  mut unaliased = me.unalias(type, aliasing)

  if type'name?
    me.addString(unaliased => null || type'moduleName)
  /if

  # if the type has no name, than it has to be wholly dumped

  mut fullDump = aliasing or not type'name?

  me.add(ptr fullDump, size(bool))

  if fullDump
    # isSigned, align, size.. Are all inferrable.

    mut itemCount uint64 = type'itemCount
    me.add(ptr itemCount, size(uint64))

    me.addType(type'retType, false)

    me.addTypeList(type'members)
  /if

  # do not write begin and end, because they have no sense without their
  # files.
/method


func collectAliases(pmod ptr ast:PModule) ptr hash:Hash
  mut ret = hash:strnew(10)

  mut i uintptr = 0
  mut len = pmod'roots.len()

  while i < len
    mut aliases = <ptr ast:PRoot>(val pmod'roots.get(i))'aliases'syms

    mut aLen = aliases.len()
    mut j uintptr = 0

    while j < aLen
      mut {key,value} = val aliases.getAt(j)

      ret.put(key, value)

      j++
    /while

    i++
  /while

  return ret
/func


method buffer:Buffer.addAliases(pmod ptr ast:PModule)
  mut aliases = collectAliases(pmod)

  # dump the length of the decls list, then the single decls.
  mut len = <uint32>(aliases.len())
  me.add(ptr len, size(uint32))

  mut iter = aliases.iter()
  mut pair ptr pair:Pair = null

  while (pair = iter.next())?
    mut name = <ptr uint8>(pair'key)
    mut dinfo = <ptr ast:DeclInfo>(pair'value)

    me.addString(name)

    me.addType(dinfo'type, true)

    pair:free(pair)
  /while

  hash:iterFree(iter)
  hash:free(aliases)
/method


method buffer:Buffer.addDeclInfo(dinfo ptr ast:DeclInfo)
  me.add(ptr dinfo'declType, size(uint16))

  # declOnly declarations are skipped
  # funcParam is only meaningful inside functions, not in the global scopeName

  me.addType(dinfo'type, false)
/method


func collectDecls(pmod ptr ast:PModule) ptr hash:Hash
  mut ret = hash:strnew(10)

  mut i uintptr = 0
  mut len = pmod'roots.len()

  while i < len
    mut decls = <ptr ast:PBlock>(val pmod'roots.get(i))'syms'syms

    mut dLen = decls.len()
    mut j uintptr = 0

    while j < dLen
      mut {key,value} = val decls.getAt(j)
      mut dinfo = <ptr ast:DeclInfo>(value)

      # Ignore "decl"s - they are not meaningful in a ford
      if not dinfo'declOnly
        # dump the name, then the declaration info
        ret.put(key, dinfo)
      /if

      j++
    /while

    i++
  /while

  return ret
/func


method buffer:Buffer.addDecls(pmod ptr ast:PModule)
  mut decls = collectDecls(pmod)

  # dump the length of the decls list, then the single decls.
  mut len = <uint32>(decls.len())
  me.add(ptr len, size(uint32))

  mut iter = decls.iter()
  mut pair ptr pair:Pair = null

  while (pair = iter.next())?
    mut key = <ptr uint8>(pair'key)
    mut dinfo = <ptr ast:DeclInfo>(pair'value)

    me.addString(key)

    me.addDeclInfo(dinfo)

    pair:free(pair)
  /while

  hash:iterFree(iter)
  hash:free(decls)
/method


func collectImports(pmod ptr ast:PModule) ptr set:Set
  mut ret = set:strnew(10)

  mut i uintptr = 0
  mut len = pmod'roots.len()

  while i < len
    mut imports = <ptr ast:PRoot>(val pmod'roots.get(i))'imports

    mut j uintptr = 0
    mut impLen = imports.len()

    while j < impLen
      mut importName = <ptr ast:StringDef>(val imports.get(j))

      ret.put(importName'name)

      j++
    /while

    i++
  /while

  return ret
/func


method buffer:Buffer.addImports(pmod ptr ast:PModule)
  mut imports = collectImports(pmod)

  # dump the length of the import list, then the single imports.
  mut len = <uint16>(imports.len())
  me.add(ptr len, size(uint16))

  mut iter = imports.iter()
  mut elem data = null

  while (elem = iter.next())?
    me.addString(<ptr uint8>(elem))
  /while

  set:iterFree(iter)
  set:free(imports)
/method


func makeFord(pmod ptr ast:PModule) ptr buffer:Buffer
  mut buf = buffer:new(30)

  # init: first thing should be libfork version.

  mut rel = libfork:RELEASE
  buf.add(ptr rel, size(uint16))

  # then, dump the module name.

  buf.addString(pmod'name)


  buf.addImports(pmod)


  buf.addAliases(pmod)


  buf.addDecls(pmod)

  return buf
/func


func writeFordStream(stream ptr io:Stream,
                     genData ptr buffer:Buffer,
                     extra ptr uint8,
                     extraLen uintptr) ptr err:Error

  mut {fordData,dataLen} = buffer:unwrap(genData)
  stream.write(fordData, dataLen)

  mem:free(fordData)
  mut err = stream.error()

  if err?
    io:streamClose(stream)
    return err
  /if

  mut writeLen = <uint32>(extra? => extraLen || 0)
  stream.write(ptr writeLen, size(uint32))

  if extra?
    stream.write(extra, extraLen)
    if (err = stream.error())?
      return err
    /if
  /if

  return null
/func


func writeFord(name,path ptr uint8,
               genData ptr buffer:Buffer,
               extra ptr uint8,
               extraLen uintptr) ptr err:Error

  if not name?
    return err:new("can't generate ford for <main> module")
  /if

  mut fName = txt:strappend(name, ".ford")
  mut filePath = fs:pathJoin(path, fName)
  mem:free(fName)

  mut {outstr,err} = fs:fileCreate(filePath)
  mem:free(filePath)

  if err?
    return err
  /if

  err = writeFordStream(outstr, genData, extra, extraLen)

  io:streamClose(outstr)

  return err
/func
