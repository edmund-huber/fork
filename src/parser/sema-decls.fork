#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module parser


import ast
import cs
import hash
import kv
import list
import mem
import parser
import txt
import utils


method parser:Resolver.findRecAlias(scope ptr ast:PNode,
                                    ralias ptr ast:Type) ptr ast:Type

  if ralias'type != ast:TYPE_RECALIAS
    return ralias
  /if

  if ralias'moduleName?
    return me.findAliasImport(ralias'moduleName, ralias'name)
  /if

  return scope.findAliasLocal(ralias'name)
/method


method parser:Resolver.findSymModule(moduleName, name ptr uint8) ptr ast:Type
  mut imp = me'prs.getImport(moduleName)
  if not imp?
    return null
  /if

  return imp'node'syms.typeof(name)
/method


# 'module:Type.method' can be defined 1. in current module 2. in the type's
# module, with this precedence order.
# Otherwise, it's pretty complicated to handle conflicts, and, most important,
# you don't really know who calls what.
method parser:Resolver.findMethod(node ptr ast:PNode,
                typeModule,typeName,methodName ptr uint8) ptr ast:Type

  mut name = ast:methodKey(typeModule, typeName,methodName)

  mut ret = node.findSym(name)
  if ret?
    mem:free(name)
    return ret
  /if

  mut root = node.findPRoot()

  # fetch this from the current ford.
  if root'moduleName?
    ret = me.findSymModule(root'moduleName'name, name)
    if ret?
      mem:free(name)
      return ret
    /if
  /if

  # otherwise, lookup in the type's module.

  ret = me.findSymModule(typeModule, name)
  mem:free(name)

  return ret
/method


method parser:Resolver.rootDeclsRegister(name ptr uint8, isDecl bool, type ptr ast:Type, declType uint16)
  me'curRoot'node'syms.add(name, isDecl, false, type, declType)

  me'decls.remove(name)
/method


# Idea: if we're in a recursive invocation from an expression,
# we only need its type (if possible).
# Otherwise, if inherited from an expression, we must validate it to extract the
# actual type.
method parser:Resolver.registerDeclReal(pdecl ptr ast:PDecl,
                                      recursive bool,
                                      recList ptr list:List) ptr ast:Type

  mut name = ast:declKey(pdecl)
  mut ptype = pdecl'sym'type

  mut isDecl = pdecl'isDecl
  mut isEntry = pdecl'node'type == ast:PENTRY
  mut isMethod = pdecl'node'type == ast:PMETHOD
  mut isFunc = pdecl'node'type == ast:PFUNCTION or isEntry or isMethod


  mut realType ptr ast:Type = <ptr ast:PNode>(pdecl).findSym(name)
  mut typeResolved = realType?
  mut inMap = typeResolved

  # save the current root - we need to change it to this pdecl's root, because
  # cross-module validation can jump from a file to another.
  mut oldRoot = me'curRoot
  me.setCurrentRoot(pdecl'node.findPRoot())

  # check: if this symbol is present, it's because it has already been
  # type-resolved (we ensured univocity of declarations while collecting decls)
  # and maybe not validated yet. Return type if validated.
  if typeResolved and pdecl'node'validated
    return realType
  /if

  if ptype? and not typeResolved
    typeResolved = (realType = me.resolveType(ptype))?

    if not typeResolved
      return null
    /if
  /if

  # if we are just resolving a type, we shall stop, return the type and
  # validate the rest only when needed.

  if not pdecl'node'validated

    if isFunc and not isDecl

      # register function BEFORE because it can be recursive
      # realType will always be non-null
      if not inMap and not isEntry
        me.rootDeclsRegister(name, pdecl'isDecl, realType, pdecl'node'type)
        inMap = true
      /if

      if not recursive
        if not me.validateFunc(pdecl, realType)
          return null
        /if

        pdecl'node'validated = true
      /if

    else

      if pdecl'node'leaves.len() > 0

        mut pexpr = <ptr ast:PExpr>(val pdecl'node'leaves.get(0))

        if not pexpr.isCompileConst()
          mut msg = "expression is not a compile time constant"

          me'issues.error(pexpr'node'begin, me'curRoot'fileName, msg)
        /if

        # if we're are validating the declaration directly and not because of
        # recursive resolution, or if we still have no type, resolve the
        # expression associated with this mut (we are also sure we have a mut)
        if not recursive
          mut valType = me.validateExprRecl(pexpr, recList)
          if not valType?
            return null
          /if

          if typeResolved
            if not me.typeIsAssignable(<ptr ast:PNode>(pdecl), realType, valType)
              mut cs = cs:new(20)
              cs.add("cannot assign an expression of type '")
              valType.summarize(cs)
              cs.add("' to a variable declared as '")
              realType.summarize(cs)
              cs.add("'")

              mut msg = cs:unwrap(cs)

              me'issues.error(ptype'begin, me'curRoot'fileName, msg)

              mem:free(msg)

              return null
            /if
          else
            if valType.isNull()
              me'issues.error(ptype'begin, me'curRoot'fileName, \
                              "can't declare a variable with type 'null'")
              return null
            /if

            realType = valType
          /if
        /if
      /if

      pdecl'node'validated = true
    /if

  /if

  # functions are already registered
  if not inMap and realType? and pdecl'node'type != ast:PENTRY
    me.rootDeclsRegister(name, pdecl'isDecl, realType, pdecl'node'type)
  /if

  if isEntry
    me'curRoot'entryNode = pdecl
  /if

  # restore root.
  me.setCurrentRoot(oldRoot)

  return realType
/method


method parser:Resolver.registerTopDeclReal(pdecl ptr ast:PDecl,
                                          recList ptr list:List) ptr ast:Type

  recList.push(ast:declKey(pdecl))

  mut ret = me.registerDeclReal(pdecl, false, recList)

  mem:free(recList.pop())

  return ret
/method


method parser:Resolver.registerTopDecl(pdecl ptr ast:PDecl) ptr ast:Type

  mut recList list:List
  list:init(ptr recList)

  mut ret = me.registerTopDeclReal(pdecl, ptr recList)

  list:deinit(ptr recList)

  return ret
/method


method parser:Resolver.resolveDeclType(name ptr uint8,
                                       node ptr ast:PNode,
                                       recList ptr list:List) ptr ast:Type

  mut dtype = node.findSym(name)

  if dtype?
    return dtype
  /if

  # in this case we should look if there is a global declaration value left with
  # this name

  mut whichDecl = <ptr ast:PDecl>(me'decls.get(name))

  if whichDecl?
    return me.registerDeclReal(whichDecl, false, recList)
  /if

  # The declaration is absent

  mut msg = txt:strappend(name, " is not defined in current scope")
  me'issues.error(node'begin, me'curRoot'fileName, msg)

  mem:free(msg)

  return null
/method


method parser:Resolver.registerDecl(pdecl ptr ast:PDecl,
                                    name ptr uint8,
                                    type ptr ast:Type,
                                    declType uint16) ptr ast:Type

  mut declNode = <ptr ast:PNode>(pdecl)

  mut stab = declNode.findStab()
  if stab.typeof(name)?
    mut cs = cs:new(20)
    cs.add("symbol '")
    cs.add(name)
    cs.add("' is already defined")

    mut msg = cs:unwrap(cs)

    me'issues.error(declNode'begin, me'curRoot'fileName, msg)

    mem:free(msg)

    return null
  /if

  stab.add(name, pdecl'isDecl, false, type, declType)

  return type
/method
