#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module parser


import ast
import cs
import err
import fs
import hash
import io
import kv
import list
import mem
import memutils
import pair
import parser
import proc
import set
import tty
import txt
import vect


mut MIN_VER = 12
mut IMPORTER_VERBOSE_DEBUG = true


func fordFree(ford ptr parser:Ford)
  if ford?
    mem:free(ford'name)
    ast:stabFree(ford'aliases)
    ast:stabFree(ford'decls)
    mem:free(ford'extra)
    vect:free(ford'imports)

    mem:free(ford)
  /if
/func


alias Importer struct(
  prs ptr parser:Parser,
  in ptr io:Stream,
  name,path ptr uint8
)


func debug(str ptr uint8)
  if IMPORTER_VERBOSE_DEBUG
    tty:out(str)
  /if
/func


func debugLine(str ptr uint8)
  if IMPORTER_VERBOSE_DEBUG
    tty:outln(str)
  /if
/func


func debugPType(ptype ptr ast:PType)
  if IMPORTER_VERBOSE_DEBUG
    tty:out("### LOADED PTYPE ")
    ptype.dump()
    tty:outln("")
  /if
/func


func dumpBytes(bytes ptr uint8, len uintptr)
  if IMPORTER_VERBOSE_DEBUG
    tty:out("## READ ")
    tty:outint(len)
    tty:out(" bytes: ")

    mut i uintptr = 0

    while i < len
      tty:outint(bytes[i])
      tty:out(" ")

      i++
    /while

    tty:outln("")
  /if
/func


method io:Stream.ensureRead(buf data, len uintptr) ptr err:Error
  mut read uintptr = 0

  while read < len
    mut nowRead = me.read(buf + read, len - read)

    if nowRead == 0
      mut err = me.error()

      if err?
        return err
      else
        break
      /if
    /if

    read = read + nowRead
  /while

  dumpBytes(<ptr uint8>(buf), len)
  return null
/method


method Importer.loadBool() {b bool, err ptr err:Error}
  mut ret = false

  mut err = me'in.ensureRead(ptr ret, size(bool))

  return {ret,err}
/method


method Importer.loadUInt16() {n uint16, err ptr err:Error}
  mut ret uint16 = 0

  mut err = me'in.ensureRead(ptr ret, size(uint16))

  return {ret,err}
/method


method Importer.loadUInt32() {n uint32, err ptr err:Error}
  mut ret uint32 = 0

  mut err = me'in.ensureRead(ptr ret, size(uint32))

  return {ret,err}
/method


method Importer.loadUInt64() {n uint64, err ptr err:Error}
  mut ret uint64 = 0

  mut err = me'in.ensureRead(ptr ret, size(uint64))

  return {ret,err}
/method


method Importer.loadString() {str ptr uint8, err ptr err:Error}
  mut {len,err} = me.loadUInt16()
  if err?
    return {null,err}
  /if

  if len == 0
    return {null,null}
  /if

  mut ret = <ptr uint8>(mem:zalloc(len + 1))

  err = me'in.ensureRead(ret, len)
  if err?
    mem:free(ret)
    return {null,err}
  /if

  return {ret,null}
/method


method Importer.loadExtra() {extra ptr uint8, extraLen uint32, err ptr err:Error}
  mut {extraLen, err} = me.loadUInt32()
  if err?
    return {null,0,err}
  /if

  if extraLen == 0
    return {null,0,null}
  /if

  mut extra = cast<ptr uint8>(mem:alloc(extraLen))

  err = me'in.ensureRead(extra, extraLen)
  if err?
    mem:free(extra)
    return {null,0,err}
  /if

  return {extra,extraLen,null}
/method


method Importer.loadDecls(aliases ptr ast:Symtable) {decls ptr ast:Symtable,
                                                      err ptr err:Error}

  debugLine("### READ decls len")
  mut {len,err} = me.loadUInt32()
  if err?
    return {null,err}
  /if

  mut typeScope Scope = {me, null, aliases, null}

  mut i uint32 = 0

  mut ret = ast:stabNew()
  while i < len
    debugLine("### READ decl name")
    mut {name,err} = me.loadString()
    if err?
      ast:stabFree(ret)
      return {null,err}
    /if

    debugLine("### READ decl declType")
    mut {declType,err} = me.loadUInt16()
    if err?
      mem:free(name)
      ast:stabFree(ret)
      return {null,err}
    /if

    debugLine("### READ decl type")
    mut {ptype,err} = me.loadType()
    if err?
      mem:free(name)
      ast:stabFree(ret)
      return {null,err}
    /if

    mut type = typeScope.solveType(ptype, null)
    memutils:decRef(ptype)

    debug("### FINISHED decl ")
    debugLine(name)
    ret.add(name, true, false, type, declType)

    i++
  /while

  return {ret,null}
/method


method Importer.inferPTypeType(type uint16) {type uint16, err ptr err:Error}
  if type == ast:TYPE_FUNC
    return {ast:PTYPE_FUNC,null}
  /if

  if type == ast:TYPE_PTR
    return {ast:PTYPE_PTR,null}
  /if

  if type == ast:TYPE_LOC
    return {ast:PTYPE_LOC,null}
  /if

  if    type == ast:TYPE_BOOL or type == ast:TYPE_INT \
     or type == ast:TYPE_RECALIAS or type == ast:TYPE_DATA
    return {ast:PTYPE_ID,null}
  /if

  if type == ast:TYPE_STRUCT
    return {ast:PTYPE_STRUCT,null}
  /if

  mut cs = cs:new(20)
  cs.add("malformed ford '")
  cs.add(me'path)
  cs.add("': ")
  cs.addInt(type)
  cs.add(" is not a dumpable type identifier")

  mut msg = cs:unwrap(cs)

  mut err = err:new(msg)

  mem:free(msg)

  return {0,err}
/method


method Importer.loadTypeList() {members ptr list:List, err ptr err:Error}
  mut {ok,err} = me.loadBool()
  if err?
    return {null,err}
  /if

  if not ok
    return {null,null}
  /if

  debugLine("### Loading typelist len")
  mut {len,err} = me.loadUInt32()
  if err?
    return {null,err}
  /if

  mut ret = list:new()
  mut i uint32 = 0

  while i < len
    debugLine("### Loading typelist member name")
    mut {name,err} = me.loadString()
    if err?
      list:freeAll(ret, ptr memutils:decRef)
      return {null,err}
    /if

    debugLine("### Loading typelist member ptype")
    mut {ptype,err} = me.loadType()
    if err?
      mem:free(name)
      list:freeAll(ret, ptr memutils:decRef)
      return {null,err}
    /if

    if ptype?
      ret.append(ast:psymbolNew(name, ptype))
    else
      mem:free(name)
    /if

    i++
  /while

  return {ret,null}
/method


method Importer.loadType() {ptype ptr ast:PType, err ptr err:Error}
  debugLine("### Loading type ok bool")
  mut {ok,err} = me.loadBool()
  if err?
    return {null,err}
  /if

  if not ok
    return {null,null}
  /if

  debugLine("### Loading type id")
  mut {type,err} = me.loadUInt16()
  if err?
    return {null,err}
  /if

  mut {ptType,err} = me.inferPTypeType(type)
  if err?
    return {null,err}
  /if

  mut modName ptr uint8 = null

  debugLine("### Loading type name")
  mut {name,err} = me.loadString()
  if err?
    return {null,err}
  /if

  # if there's a name, read a possible moduleName
  if name?
    debugLine("### Loading type module name")
    {modName,err} = me.loadString()
    if err?
      mem:free(name)
      return {null,err}
    /if
  /if

  debugLine("### Loading fullDump bool")
  mut {fullDump,err} = me.loadBool()
  if err?
    mem:free(name)
    mem:free(modName)
    return {null,err}
  /if

  if name? and not fullDump
    # also, if there's a name, assume PTYPE_ID
    ptType = ast:PTYPE_ID
  /if

  mut itemCount uintptr = 0
  mut retType ptr ast:PType = null
  mut members ptr list:List = null

  if fullDump
    debugLine("### Loading type itemCount")
    {itemCount,err} = me.loadUInt64()
    if err?
      mem:free(name)
      mem:free(modName)
      return {null,err}
    /if

    debugLine("### Loading type retType")
    {retType,err} = me.loadType()
    if err?
      mem:free(name)
      mem:free(modName)
      return {null,err}
    /if

    debugLine("### Loading type members")
    {members,err} = me.loadTypeList()
    if err?
      memutils:decRef(retType)
      mem:free(name)
      mem:free(modName)
      return {null,err}
    /if
  /if

  mut pdescr = (ptType != ast:PTYPE_LOC) \
                => ast:ptypeDescrNew(ptType, retType, members) \
                || ast:ptypeDescrNewLoc(retType, itemCount)

  mut ptype = ast:ptypeNew(name, modName, pdescr)

  debugPType(ptype)

  return {ptype,null}
/method


alias Scope struct(
  imp ptr Importer,
  solved ptr set:Set,
  stab ptr ast:Symtable,
  aliasPtypes ptr hash:Hash
)


method Scope.addAlias(name ptr uint8, type ptr ast:Type)
  type'moduleName = txt:strclone(me'imp'name)
  type'name = txt:strclone(name)

  me'stab.add(name, false, false, type, ast:PALIAS)
/method


method Scope.solveRetType(retPType ptr ast:PType,
                                    recs ptr set:Set,
                                    isLoc bool) ptr ast:Type

  mut res ptr ast:Type = null

  # if this condition evaluates to true, than we're in the case of a recursive alias.
  if     not isLoc and not retPType'moduleName? and retPType'name? \
     and recs? and recs.contains(retPType'name)

    res = ast:typeNewRecursiveAlias(me'imp'prs'importsTPool, me'imp'name, \
                                     retPType'name)
  else
    # otherwise, this is a normal type. Validate it with validateAlias.
    res = me.solveType(retPType, recs)
  /if
  return res
/method


method Scope.solveSymbolList(pargs ptr list:List,
                             recs ptr set:Set,
                             funcArgs bool) ptr kv:KVList

  if not pargs?
    return kv:strnew(0)
  /if

  mut plen = pargs.len()
  mut i uintptr = 0

  mut members = kv:strnew(plen)
  members.setFreeFuncs(ptr mem:free, null)

  while i < plen
    mut member = <ptr ast:PSymbol>(val pargs.get(i))
    mut ptype = member'type

    mut type ptr ast:Type = null

    # functions can refer to recursive types, because their arguments and their
    # return types do not affect the size of the function (a function is always sizeless)
    if     funcArgs and not ptype'moduleName? and ptype'name? \
       and recs? and recs.contains(ptype'name)

      type = ast:typeNewRecursiveAlias(me'imp'prs'importsTPool, me'imp'name, \
                                        ptype'name)
    else
      type = me.solveType(ptype, recs)
    /if

    if type?
      members.put(txt:strclone(member'name), type)
    /if

    i++
  /while

  return members
/method


method Scope.solveFuncType(ptype ptr ast:PType,
                           recs ptr set:Set) ptr ast:Type

  mut ptdes = ptype'descr

  mut retVal ptr ast:Type = null
  if ptdes'retType?
    retVal = me.solveRetType(ptdes'retType, recs, false)
  /if

  mut members = me.solveSymbolList(ptdes'arguments, recs, true)

  return ast:typeNewFunc(me'imp'prs'importsTPool, null, null, retVal, members)
/method


method Scope.solvePtrLocType(ptype ptr ast:PType,
                             recs ptr set:Set) ptr ast:Type

  mut ptdes = ptype'descr
  mut isLoc = ptdes'type == ast:PTYPE_LOC

  # validate ptdes'retType
  mut res = me.solveRetType(ptdes'retType, recs, isLoc)

  if not res?
    return null
  /if

  if isLoc
    res = ast:typeNewLoc(me'imp'prs'importsTPool, null, null, ptdes'length, res)
  else
    res = ast:typeNewPtr(me'imp'prs'importsTPool, null, null, res)
  /if

  return res
/method


method Scope.solveStructType(ptype ptr ast:PType,
                             recs ptr set:Set) ptr ast:Type
  mut ptdes = ptype'descr

  mut members = me.solveSymbolList(ptdes'arguments, recs, false)

  return ast:typeNewStruct(me'imp'prs'importsTPool, null, null, members)
/method


method Scope.solveIdType(ptype ptr ast:PType,
                         recs ptr set:Set) ptr ast:Type

  mut builtin = me'imp'prs.matchBuiltin(ptype'name)
  if builtin?
    return ast:typeClone(me'imp'prs'importsTPool, builtin)
  /if

  # PType not in this module. Find it in other fords.
  if not txt:strequals(me'imp'name, ptype'moduleName)
    mut imported = me'imp'prs \
                    .getImport(ptype'moduleName)'aliases \
                    .typeof(ptype'name)
    return ast:typeClone(me'imp'prs'importsTPool, imported)
  /if

  mut ret = me'stab.typeof(ptype'name)
  if ret?
    return ret
  /if

  # if we reach this point, it means we're in an alias validation.
  # otherwise, the ford is messed up and we should abort.
  # TODO: maybe aborting is a bit too excessive?
  if recs?
    if recs.contains(ptype'name)
      return ast:typeNewRecursiveAlias(me'imp'prs'importsTPool, \
                                        me'imp'name, ptype'name)
    /if

    mut missingPType = <ptr ast:PType>(me'aliasPtypes.get(ptype'name))

    recs.put(ptype'name)

    ret = me.solveType(missingPType, recs)
    me.addAlias(ptype'name, ret)

    recs.remove(ptype'name)
  else
    proc:panic(txt:strappend("Corrupted ford ", me'imp'name))
  /if

  return ret
/method


# solveType is sure everything is right - no broken type, no bad stuff.
# Just don't corrupt or tamper fork files, and everything will be alright.
method Scope.solveType(ptype ptr ast:PType,
                       recs ptr set:Set) ptr ast:Type

  mut ptdes = ptype'descr
  mut type ptr ast:Type = null

  # if we've found an id, it can be 1. an id type 2. builtin 3. an invalid type
  if ptdes'type == ast:PTYPE_ID
    type = me.solveIdType(ptype, recs)
  else
    if ptdes'type == ast:PTYPE_PTR or ptdes'type == ast:PTYPE_LOC
      type = me.solvePtrLocType(ptype, recs)
    else
      if ptdes'type == ast:PTYPE_STRUCT
        type = me.solveStructType(ptype, recs)
      else
        if ptdes'type == ast:PTYPE_FUNC
          type = me.solveFuncType(ptype, recs)
        else
          proc:panic("unreachable")
        /if
      /if
    /if
  /if

  return type
/method


method Importer.solveTypes(aliasPtypes ptr hash:Hash) ptr ast:Symtable
  mut ret = ast:stabNew()


  mut iter = aliasPtypes.iter()
  mut pair ptr pair:Pair = null

  mut solved = set:strnew(aliasPtypes.len())

  mut scope Scope = {me, solved, ret, aliasPtypes}

  while (pair = iter.next())?
    mut name = <ptr uint8>(pair'key)
    mut ptype = <ptr ast:PType>(pair'value)

    if solved.contains(name)
      pair:free(pair)
      continue
    /if

    mut recs set:Set

    set:strinit(ptr recs, 1)

    recs.put(name)

    mut type = scope.solveType(ptype, ptr recs)
    scope.addAlias(name, type)

    recs.remove(name)

    set:deinit(ptr recs)
  /while

  hash:free(aliasPtypes)

  return ret
/method


method Importer.loadAliases() {aliases ptr ast:Symtable, err ptr err:Error}
  debugLine("### Loading alias length")
  mut {len,err} = me.loadUInt32()
  if err?
    return {null,err}
  /if

  mut i uint32 = 0

  mut aliasPtypes = hash:strnew(len)
  aliasPtypes.setFreeFuncs(ptr mem:free, ptr memutils:decRef)

  while i < len
    debugLine("### Loading alias name")
    mut {name,err} = me.loadString()
    if err?
      hash:free(aliasPtypes)
      return {null,err}
    /if

    debugLine("### Loading alias ptype")
    mut {ptype,err} = me.loadType()
    if err?
      hash:free(aliasPtypes)
      return {null,err}
    /if

    if ptype?
      aliasPtypes.put(name, ptype)
    /if

    if name?
      debug("### FINISHED TYPE ")
      debugLine(name)
    /if

    i++
  /while

  return {me.solveTypes(aliasPtypes),null}
/method


method Importer.loadImports() {imps ptr vect:Vect, err ptr err:Error}
  mut {len,err} = me.loadUInt16()
  if err?
    return {null,err}
  /if

  mut ret = vect:new(len)

  mut i uint16 = 0

  while i < len
    mut {impName,err} = me.loadString()
    if err?
      vect:free(ret)
      return {null,err}
    /if

    ret.append(impName)

    mut {ford,err} = me'prs.findFord(impName)
    if err?
      vect:free(ret)
      return {null,err}
    /if

    i++
  /while

  return {ret,null}
/method


method Importer.checkVersion() ptr err:Error
  mut {release,err} = me.loadUInt16()
  if err?
    return err
  /if

  if release < MIN_VER
    mut cs = cs:new(20)
    cs.add("module '")
    cs.add(me'path)
    cs.add("' has been built for an incompatible version and should be rebuilt")

    mut msg = cs:unwrap(cs)
    mut err = err:new(msg)
    mem:free(msg)

    return err
  /if

  return null
/method


method Importer.loadFord() {ford ptr parser:Ford,err ptr err:Error}

  mut err = me.checkVersion()
  if err?
    return {null,err}
  /if

  {me'name,err} = me.loadString()
  if err?
    return {null,err}
  /if

  mut {imps,err} = me.loadImports()
  if err?
    return {null,err}
  /if

  mut {aliases,err} = me.loadAliases()
  if err?
    vect:free(imps)
    return {null,err}
  /if

  mut {decls,err} = me.loadDecls(aliases)
  if err?
    vect:free(imps)
    ast:stabFree(aliases)
    return {null,err}
  /if

  mut {extra,extraLen,err} = me.loadExtra()
  if err?
    vect:free(imps)
    ast:stabFree(aliases)
    ast:stabFree(decls)
    return {null,err}
  /if

  mut ret = <ptr parser:Ford>(mem:alloc(size(parser:Ford)))

  val ret = {me'name, imps, aliases, decls, extra, extraLen}

  return {ret,null}
/method


method parser:Parser.loadFord(path ptr uint8) {ford ptr parser:Ford,
                                                err ptr err:Error}

  mut {instr,err} = fs:fileOpen(path)

  if err?
    return {null,err}
  /if

  mut importer Importer = {me, instr, null, path}

  mut {ford,err} = importer.loadFord()

  io:streamClose(instr)

  return {ford,err}
/method
