#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2015
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module parser


import ast
import err
import mem
import parser
import txt


func issueFree(issue ptr parser:Issue)
  if issue != null
    mem:free(issue'filename)
    mem:free(issue'message)
  /if
/func


func issueNew(gravity uint8, where ast:Line, filename, message ptr uint8)  ptr parser:Issue
  mut issue = <ptr parser:Issue>(mem:zalloc(size(parser:Issue)))

  issue'gravity = gravity
  issue'where = where
  issue'filename = txt:strclone(filename)
  issue'message = txt:strclone(message)

  return issue
/func


func issueGravityToStr(issueGravity uint8) ptr uint8
  if issueGravity == parser:ISSUE_ERR
    return "error"
  /if

  if issueGravity == parser:ISSUE_WARN
    return "warning"
  /if

  if issueGravity == parser:ISSUE_INFO
    return "info"
  /if

  return "<UNKNOWN_ISSUE_LEVEL>"
/func


func issueToError(issue ptr parser:Issue) ptr err:Error
  mut lineno [21] uint8
  mut pos [21] uint8

  txt:numtostr(issue'where'line, ptr lineno[0], 21)
  txt:numtostr(issue'where'pos, ptr pos[0], 21)

  mut toglue [10] ptr uint8
  toglue[0] = issue'filename
  toglue[1] = ":"
  toglue[2] = ptr lineno[0]
  toglue[3] = ":"
  toglue[4] = ptr pos[0]
  toglue[5] = ": "
  toglue[6] = issueGravityToStr(issue'gravity)
  toglue[7] = ": "
  toglue[8] = issue'message
  toglue[9] = null

  mut ret = err:errorGlue(ptr toglue[0])

  parser:issueFree(issue)

  return ret
/func


func issueWriteOut(issue ptr parser:Issue, outFn ptr func(err ptr uint8))
  outFn(issue'filename)
  outFn(":")


  mut buf [21] uint8
  txt:numtostr(issue'where'line, ptr buf[0], 21)

  outFn(ptr buf[0])
  outFn(":")

  txt:numtostr(issue'where'pos, ptr buf[0], 21)

  outFn(ptr buf[0])
  outFn(": ")

  outFn(issueGravityToStr(issue'gravity))
  outFn(": ")
  outFn(issue'message)
  outFn("\n")
/func


mut ISSUE_ERR  uint8 = 10
mut ISSUE_WARN uint8 = 20
mut ISSUE_INFO uint8 = 30
