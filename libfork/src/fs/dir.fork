#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014, 2015, 2016
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module fs


import err
import mem
import txt


alias Dir struct(
  absPath,name ptr uint8,
  internal data
)


decl func dir_close(dirp data)
decl func dir_next(dirp data, openPath ptr uint8, end ptr bool,
                     error ptr uint8, errl uintptr) ptr uint8

decl func dir_open(path,error ptr uint8, errl uintptr) data


func dir(name ptr uint8) {dir ptr Dir, err ptr err:Error}
  mut buf [512] uint8

  mut dirp = dir_open(name, ptr buf[0], 512)
  if not dirp?
    return {null, err:new(ptr buf[0])}
  /if

  mut ret = <ptr Dir>(mem:alloc(size(Dir)))

  ret'name = txt:strclone(pathBasename(name))
  ret'absPath = pathAbsolute(name)
  ret'internal = dirp

  return {ret, null}
/func


func dirClose(dirp ptr Dir)
  dir_close(dirp'internal)
  mem:free(dirp'name)
  mem:free(dirp'absPath)

  mem:free(dirp)
/func


method Dir.next() {file ptr File, err ptr err:Error}
  mut end = false
  mut buf [512] uint8

  mut name = dir_next(me'internal, me'absPath, ptr end, ptr buf[0], 512)
  if not name?
    if end
      return {null, null}
    /if

    return {null, err:new(ptr buf[0])}
  /if

  mut glued = pathJoin(me'absPath, name)

  mut ret = stat(glued)

  mem:free(glued)

  return ret
/method
