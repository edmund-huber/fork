#  libfork, a base library for the Fork language
#  Copyright (C) Marco Cilloni <marco.cilloni@yahoo.com> 2014, 2015, 2016
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at http://mozilla.org/MPL/2.0/.
#  Exhibit B is not attached; this software is compatible with the
#  licenses expressed under Section 1.12 of the MPL v2.


module ast


import err
import fs
import io
import mem
import misc
import txt


alias Char struct(
  ch uint8,
  pos uintptr
)


alias StringTok struct(
  str ptr uint8,
  begin,end,line uintptr
)


alias Token struct (
  type uint16,
  endPos uintptr,
  value uintptr,
  lineno ptr fs:Lineno
)


alias Lexer struct (
  file ptr io:Stream,
  lineno ptr fs:Lineno,
  error ptr err:Error,
  saved ptr StringTok,
  peek uint8,
  newline, firstLineTok, firstLineLetter bool
)


func strtokNew(str ptr uint8, line,begin,end uintptr) ptr StringTok
  mut strTok = <ptr StringTok>(mem:zalloc(size(StringTok)))

  strTok'str = str

  strTok'begin = begin
  strTok'end = end
  strTok'line = line

  return strTok
/func


func strtokFree(stok ptr StringTok)
  if stok?
    mem:free(stok)
  /if
/func


func nextChar(lex ptr Lexer) Char
  mut ret Char
  ret'ch = lex'peek
  ret'pos = 0

  lex'file.read(ptr lex'peek, 1)
  if (lex'error = lex'file.error())?
    ret'ch = 0
    return ret
  /if

  lex'lineno'pos++

  ret'pos = lex'lineno'pos

  if lex'file.ended()
    lex'peek = 0
  /if

  if ret'ch == 12 #carriage return
    if lex'peek != 10 #new line (Windows format case)
      lex'error = errorLex(lex, "inconsistent end of line - no newline after carriage return")
      ret'ch = 0
      return ret
    /if
    return nextChar(lex)
  /if

  if lex'firstLineLetter
    lex'firstLineLetter = false
    lex'lineno'lineno++
    lex'lineno'pos = 1
  /if

  if ret'ch == 10 # newline
    lex'firstLineLetter = true
  /if

  return ret
/func


func lexDiscardComment(lex ptr Lexer)
  mut ch Char
  ch'ch = 0
  while not lexerEof(lex) and ch'ch != 10
    if (ch = nextChar(lex))'ch == 0 #discard
      return #exit on error
    /if
  /while

/func


mut STX = 2 # There is no reason for using 2 and not another reserved character.


func applyEscape(ch uint8, escape bool) uint8

  if not escape
    return ch
  /if

  if ch == 97 # `a`
    return 7 # BEL
  /if

  if ch == 98 # `b`
    return 8 # BS
  /if

  if ch == 110 # `n`
    return 10 # NL
  /if

  if ch == 114 # `r`
    return 13
  /if

  if ch == 116 # `t`
    return 9
  /if

  return ch
/func


func lexExtractString(lex ptr Lexer) ptr StringTok
  mut ch = nextChar(lex) #discard the `"`
  mut begin = ch'pos

  mut cs = txt:newCs(10) #just a magic number here
  #an STX is added at the beginning, indicating that the content is not a token but a whole string.
  cs.addChar(STX)

  mut escape = false

  while not lexerEof(lex) and misc:charCanBeInString(lex'peek, escape)
    ch = nextChar(lex)
    if ch'ch == 0
      txt:freeCs(cs)
      return null
    /if

    if not escape and ch'ch == 92 # `\\`
      escape = true
    else
      cs.addChar(applyEscape(ch'ch, escape))
      escape = false
    /if
  /while

  if lexerEof(lex)
    txt:freeCs(cs)
    lex'error = errorLex(lex, "unexpected EOF in string body")
    return null
  /if

  if (ch = nextChar(lex))'ch != 34 # `"`
    txt:freeCs(cs)
    mut got [2] uint8
    got[0] = ch'ch
    got[1] = 0 # `\0` c string terminator

    lex'error = issueToError(errorMism(lex'lineno, "\"", ptr got[0]))
    return null
  /if

  return strtokNew(txt:unwrapCs(cs), lex'lineno'lineno, begin, ch'pos)
/func


func lexExtractSym(lex ptr Lexer) ptr StringTok
  mut cs = txt:newCs(10) #magic number
  mut i uintptr = 0
  mut ch Char
  mut first = true
  mut begin uintptr = 0

  while not lexerEof(lex) and misc:charIsSym(lex'peek) and i < 2
    ch = nextChar(lex)
    if ch'ch == 0
      txt:freeCs(cs)
      return null
    /if

    if first
      begin = ch'pos
      first = false
    /if

    cs.addChar(ch'ch)
  /while

  return strtokNew(txt:unwrapCs(cs), lex'lineno'lineno, begin, ch'pos)
/func


func lexHandleId(lex ptr Lexer) ptr StringTok
  mut cs = txt:newCs(10) #magic number
  mut ch Char
  mut begin uintptr
  mut first = true

  while misc:charIsIdVal(lex'peek)
    ch = nextChar(lex)
    if ch'ch == 0
      txt:freeCs(cs)
      return null
    /if

    if first
      begin = ch'pos
      first = false
    /if

    cs.addChar(ch'ch)
  /while

  return strtokNew(txt:unwrapCs(cs), lex'lineno'lineno, begin, ch'pos)
/func


func skipWhites(lex ptr Lexer, ignoreNewline bool)
  while misc:charIsWhite(lex'peek)
    mut ch = nextChar(lex)
    if not ignoreNewline and ch'ch == 10 and not lex'firstLineTok #character `\n`
      lex'firstLineTok = true
      lex'newline = true
    /if
  /while
/func


func extractNextToken(lex ptr Lexer) ptr StringTok

  if lex'file.ended()
    return null
  /if

  skipWhites(lex, false)

  if lex'peek == 0
    return null
  /if

  # if we have a '\', then ignore the next newline
  if lex'peek == 92
    nextChar(lex) # discard `\`
    skipWhites(lex, true)
  /if

  if lex'peek == 35 # character `#` - means the beginning of a single line comment
    lexDiscardComment(lex)
    if not lexerEof(lex) and not lex'firstLineTok
      lex'newline = true
      lex'firstLineTok = true
    /if

    return extractNextToken(lex)
  /if

  if lex'peek == 34 # character `"` - means the beginning of a string
    return lexExtractString(lex)
  /if

  if misc:charIsSym(lex'peek)
    return lexExtractSym(lex)
  /if

  if misc:charIsPar(lex'peek)
    mut str = <ptr uint8>(mem:zalloc(2 * size(uint8)))
    mut par = nextChar(lex)
    str[0] = par'ch
    return strtokNew(str, lex'lineno'lineno, par'pos, par'pos)
  /if

  lex'firstLineTok = false

  return lexHandleId(lex)
/func


func lexerClose(lex ptr Lexer)
  io:streamClose(lex'file)
  fs:linenoFree(lex'lineno)
  mem:free(lex)
/func


func lexerError(lexer ptr Lexer) ptr err:Error
  return lexer'error
/func


func lexerFromStream(stream ptr io:Stream, name ptr uint8) {lex ptr Lexer, err ptr err:Error}
  mut ret = <ptr Lexer>(mem:zalloc(size(Lexer)))

  ret'file = stream
  ret'lineno = fs:linenoNew(txt:strclone(name),0,0)
  ret'firstLineTok = true
  ret'firstLineLetter = true

  stream.read(ptr ret'peek, 1)
  mut err = stream.error()

  if err?
    return {null, err}
  /if

  return {ret, null}
/func


func lexerNew(fname ptr uint8) {lex ptr Lexer, err ptr err:Error}
  mut result = fs:fileOpen(fname)

  if result'err?
    return {null, result'err}
  /if

  return lexerFromStream(result'stream, fname)
/func


func lexerEof(lexer ptr Lexer) bool
  return lexer'file.ended()
/func


func tokenNew(type uint16, value uintptr, lineno ptr fs:Lineno, end uintptr) ptr Token
  mut ret = <ptr Token>(mem:alloc(size(Token)))
  ret'type = type
  ret'endPos = end
  ret'lineno = lineno
  ret'value = value
  return ret
/func


func tokenFree(tok ptr Token)
  if tok?
    if (tok'type == ID or tok'type == STRING) and tok'value != 0
      mem:free(<data>(tok'value))
    /if
    fs:linenoFree(tok'lineno)
    mem:free(tok)
  /if
/func


func errorLex(lex ptr Lexer, msg ptr uint8) ptr err:Error
  mut toglue [4] ptr uint8

  toglue[0] = lex'lineno'filename
  toglue[1] = ": "
  toglue[2] = msg
  toglue[3] = null

  return err:glue(ptr toglue[0])
/func


func lexerNext(lex ptr Lexer) ptr Token
  if lexerEof(lex)
    return null
  /if

  if lexerError(lex)?
    return null
  /if

  mut stringToken = lex'saved

  if not lex'saved?
    stringToken = extractNextToken(lex)
    if lexerError(lex)?
      return null
    /if
  else
    lex'saved = null

    # this is needed because this field is set to false only by extractNextToken.
    # if the saved one is the firstLineTok, then the next extractNextToken will still think
    # we're at the beginning of the line. This fixes it.
    if lex'firstLineTok
      lex'firstLineTok = false
    /if
  /if

  if not stringToken?
    return null
  /if

  mut begin = fs:linenoClone(lex'lineno)
  begin'pos = stringToken'begin
  mut endPos = stringToken'end

  mut type uint16 = 0
  mut value uintptr = 0

  if lex'newline
    lex'saved = stringToken
    lex'newline = false

    begin'lineno--
    begin'pos = 0

    return tokenNew(NEWLINE, 0, begin, 0)
  /if

  mut strToken = stringToken'str

  if val strToken == STX # is a constant string
    type = STRING
    value = <uintptr>(txt:strclone(strToken + 1))
  /if

  if txt:strequals(strToken, "alias")
    type = ALIAS
  /if

  if txt:strequals(strToken, "&")
    type = AMPER
  /if

  if txt:strequals(strToken, "and")
    type = AND
  /if

  if txt:strequals(strToken, "'")
    type = APOS
  /if

  if txt:strequals(strToken, "=")
    type = ASSIGN
  /if

  if txt:strequals(strToken, "break")
    type = BREAK
  /if

  if txt:strequals(strToken, "cast")
    type = CAST
  /if

  if txt:strequals(strToken, "]")
    type = CBRAC
  /if

  if txt:strequals(strToken, "}")
    type = CCURLY
  /if

  if txt:strequals(strToken, ":")
    type = COLON
  /if

  if txt:strequals(strToken, ",")
    type = COMMA
  /if

  if txt:strequals(strToken, "continue")
    type = CONTINUE
  /if

  if txt:strequals(strToken, ")")
    type = CPAR
  /if

  if txt:strequals(strToken, "--")
    type = DEC
  /if

  if txt:strequals(strToken, "decl")
    type = DECL
  /if

  if txt:strequals(strToken, "!=")
    type = DIFFERENT
  /if

  if txt:strequals(strToken, ".")
    type = DOT
  /if

  if txt:strequals(strToken, "??")
    type = DQUEST
  /if

  if txt:strequals(strToken, "mod")
    type = MOD
  /if

  if txt:strequals(strToken, "/")
    if misc:charIsIdVal(lex'peek)
      lex'saved = extractNextToken(lex)
      if lexerError(lex)?
        return null
      /if

      mut savedTok = lex'saved'str

      if txt:strequals(savedTok, "entry")
        type = ENDENTRY
      /if

      if txt:strequals(savedTok, "func")
        type = ENDFUNC
      /if

      if txt:strequals(savedTok, "if")
        type = ENDIF
      /if

      if txt:strequals(savedTok, "method")
        type = ENDMETHOD
      /if

      if txt:strequals(savedTok, "while")
        type = ENDWHILE
      /if

      if type != 0
        endPos = lex'saved'end
        mem:free(savedTok)
        strtokFree(lex'saved)
        lex'saved = null
      /if
    /if
    if type == 0 # nothing has been matched, so it is a `/`
        type = DIV
    /if
  /if

  if txt:strequals(strToken, "else")
    type = ELSE
  /if

  if txt:strequals(strToken, "entry")
    type = ENTRY
  /if

  if txt:strequals(strToken, "==")
    type = EQUAL
  /if

  if txt:strequals(strToken, "false")
    type = FALSE
  /if

  if txt:strequals(strToken, "=>")
    type = FATARROW
  /if

  if txt:strequals(strToken, "func")
    type = FUNC
  /if

  if txt:strequals(strToken, "if")
    type = IF
  /if

  if txt:strequals(strToken, "import")
    type = IMPORT
  /if

  if txt:strequals(strToken, "++")
    type = INC
  /if

  if txt:strequals(strToken, ">=")
    type = MAJEQ
  /if

  if txt:strequals(strToken, ">")
    type = MAJOR
  /if

  if txt:strequals(strToken, "me")
    type = ME
  /if

  if txt:strequals(strToken, "method")
    type = METHOD
  /if

  if txt:strequals(strToken, "<=")
    type = MINEQ
  /if

  if txt:strequals(strToken, "<")
    type = MINOR
  /if

  if txt:strequals(strToken, "-")
    type = MINUS
  /if

  if txt:strequals(strToken, "module")
    type = MODULE
  /if

  if txt:strequals(strToken, "mut")
    type = MUT
  /if

  if txt:strequals(strToken, "not")
    type = NOT
  /if

  if txt:strequals(strToken, "null")
    type = NULL
  /if

  if txt:strequals(strToken, "[")
    type = OBRAC
  /if

  if txt:strequals(strToken, "{")
    type = OCURLY
  /if

  if txt:strequals(strToken, "(")
    type = OPAR
  /if

  if txt:strequals(strToken, "or")
    type = OR
  /if

  if txt:strequals(strToken, "|")
    type = PIPE
  /if

  if txt:strequals(strToken, "+")
    type = PLUS
  /if

  if txt:strequals(strToken, "**")
    type = POW
  /if

  if txt:strequals(strToken, "ptr")
    type = PTR
  /if

  if txt:strequals(strToken, "?")
    type = QUEST
  /if

  if txt:strequals(strToken, "return")
    type = RETURN
  /if

  if txt:strequals(strToken, "||")
    type = SEPARATOR
  /if

  if txt:strequals(strToken, "size")
    type = SIZE
  /if

  if txt:strequals(strToken, "struct")
    type = STRUCT
  /if

  if txt:strequals(strToken, "*")
    type = TIMES
  /if

  if txt:strequals(strToken, "true")
    type = TRUE
  /if

  if txt:strequals(strToken, "::")
    type = TWOCOLONS
  /if

  if txt:strequals(strToken, "val")
    type = VAL
  /if

  if txt:strequals(strToken, "while")
    type = WHILE
  /if

  if txt:strequals(strToken, "^")
    type = XOR
  /if

  if misc:strIsUInt(strToken)
    type = NUMBER
    value = txt:strtonum(strToken)
  /if

  if type == 0 # if it's still unmodified, then it's an identifier, or sh(<,>)

    # `sh<` and `sh>` check is here, because sh is still a valid identifier.
    if     not lexerEof(lex) \
       and txt:strequals(strToken, "sh") \
       and (lex'peek == 60 or lex'peek == 62)

      mut {ch,endPos} = nextChar(lex)

      # `<` == 60, `>` == 62
      type = (ch == 60) => SHIFTL || SHIFTR
    else
      type = ID
      value = <uintptr>(strToken)
    /if
  else
    mem:free(strToken)
  /if

  strtokFree(stringToken)

  return tokenNew(type, value, begin, endPos)
/func


func ttypeStr(tt uint16) ptr uint8
  if tt == EOF
    return "Eof"
  /if

  if tt == NEWLINE
    return "a newline"
  /if

  if tt == ALIAS
    return "alias"
  /if

  if tt == AMPER
    return "&"
  /if

  if tt == AND
    return "and"
  /if

  if tt == APOS
    return "'"
  /if

  if tt == ASSIGN
    return "="
  /if

  if tt == BREAK
    return "break"
  /if

  if tt == CAST
    return "cast"
  /if

  if tt == CBRAC
    return "]"
  /if

  if tt == COLON
    return ":"
  /if

  if tt == COMMA
    return ","
  /if

  if tt == CONTINUE
    return "continue"
  /if

  if tt == CCURLY
    return "}"
  /if


  if tt == CPAR
    return ")"
  /if

  if tt == DEC
    return "--"
  /if

  if tt == DECL
    return "decl"
  /if

  if tt == DIFFERENT
    return "!="
  /if

  if tt == DIV
    return "/"
  /if

  if tt == DOT
    return "."
  /if

  if tt == DQUEST
    return "??"
  /if

  if tt == ELSE
    return "else"
  /if

  if tt == ENDENTRY
    return "/entry"
  /if

  if tt == ENDFUNC
    return "/func"
  /if

  if tt == ENDIF
    return "/if"
  /if

  if tt == ENDMETHOD
    return "/method"
  /if

  if tt == ENDWHILE
    return "/while"
  /if

  if tt == ENTRY
    return "entry"
  /if

  if tt == EQUAL
    return "=="
  /if

  if tt == FALSE
    return "false"
  /if

  if tt == FATARROW
    return "=>"
  /if

  if tt == FUNC
    return "func"
  /if

  if tt == ID
    return "an identifier"
  /if

  if tt == IF
    return "if"
  /if

  if tt == IMPORT
    return "import"
  /if

  if tt == INC
    return "++"
  /if

  if tt == MAJEQ
    return ">="
  /if

  if tt == MAJOR
    return ">"
  /if

  if tt == ME
    return "me"
  /if

  if tt == METHOD
    return "method"
  /if

  if tt == MINEQ
    return "<="
  /if

  if tt == MINOR
    return "<"
  /if

  if tt == MINUS
    return "-"
  /if

  if tt == MOD
    return "mod"
  /if

  if tt == MODULE
    return "module"
  /if

  if tt == MUT
    return "mut"
  /if

  if tt == NOT
    return "not"
  /if

  if tt == NULL
    return "null"
  /if

  if tt == NUMBER
    return "a number"
  /if

  if tt == OBRAC
    return "["
  /if

  if tt == OCURLY
    return "{"
  /if

  if tt == OPAR
    return "("
  /if

  if tt == OR
    return "or"
  /if

  if tt == PIPE
    return "|"
  /if

  if tt == PLUS
    return "+"
  /if

  if tt == POW
    return "**"
  /if

  if tt == PTR
    return "ptr"
  /if

  if tt == QUEST
    return "?"
  /if

  if tt == RETURN
    return "return"
  /if

  if tt == SEPARATOR
    return "||"
  /if

  if tt == SIZE
    return "size"
  /if

  if tt == SHIFTL
    return "sh<"
  /if

  if tt == SHIFTR
    return "sh>"
  /if

  if tt == STRING
    return "a string"
  /if

  if tt == STRUCT
    return "struct"
  /if

  if tt == TIMES
    return "*"
  /if

  if tt == TRUE
    return "true"
  /if

  if tt == UMINUS
    return "- (Unary)"
  /if

  if tt == VAL
    return "val"
  /if

  if tt == WHILE
    return "while"
  /if

  if tt == XOR
    return "^"
  /if

  return "<unknown, please, reportnot >"
/func


func tokenStr(tok ptr Token) ptr uint8
  return ttypeStr(not tok? => EOF || tok'type)
/func


func issueFromLexError(err ptr err:Error, lineno ptr fs:Lineno) ptr Issue
  if not err?
    return null
  /if

  mut where txt:Line
  where'line = lineno'lineno
  where'pos = lineno'pos

  mut ret = issueNew(ISSUE_ERR, where, lineno'filename, err'msg)

  err:free(err)

  return ret
/func


func lineMake(llin ptr fs:Lineno) txt:Line
  mut ret txt:Line

  ret'line = llin'lineno
  ret'pos =  llin'pos

  return ret
/func


func tokExtractBegin(tok ptr Token) txt:Line
  mut ret txt:Line
  ret'line = tok'lineno'lineno
  ret'pos = tok'lineno'pos

  return ret
/func


func tokExtractEnd(tok ptr Token) txt:Line
  mut ret txt:Line
  ret'line = tok'lineno'lineno
  ret'pos = tok'endPos

  return ret
/func


func tokDiscardBegin(tok ptr Token) txt:Line
  mut ret = tokExtractBegin(tok)

  tokenFree(tok)

  return ret
/func


func tokDiscardEnd(tok ptr Token) txt:Line
  mut ret = tokExtractEnd(tok)

  tokenFree(tok)

  return ret
/func


func error(lineno ptr fs:Lineno, msg ptr uint8) ptr Issue
  mut line txt:Line
  line'line = lineno'lineno
  line'pos = lineno'pos

  return issueNew(ISSUE_ERR, line, lineno'filename, msg)
/func


func errorMism(lineno ptr fs:Lineno, exp ptr uint8, got ptr uint8) ptr Issue

  mut toglue [5] ptr uint8
  toglue[0] = "expected "
  toglue[1] = exp
  toglue[2] = ", got "
  toglue[3] = got
  toglue[4] = null

  mut glued = txt:strglue(ptr toglue[0])
  mut ret =  error(lineno, glued)

  mem:free(glued)

  return ret
/func
